@page "/saisie-avoir"

@inject ICompagnieService compagnieService
@inject IAgenceDeVoyageService agenceDeVoyageService
@inject INotificationUIService notificationUIService

@inject IJSRuntime JS
@inject IWebHostEnvironment Environment


<SfDialog Width="90%" ShowCloseIcon IsModal @bind-Visible="SiPopupSaisieVisible">
	<DialogTemplates>
		<Header>
			<div class="PopupAvoir__EnTete">
				<div class="GTT_Titre2">Créer un avoir</div>
				<div class="GTT_Body16">Remplissez le formulaire pour créer un avoir.</div>
			</div>
		</Header>
		<Content>
			<div class="PopupAvoir__Contenu">
				<div class="PopupAvoir__Contenu__Haut">
					<div class="PopupAvoir__Formulaire">
						<EditForm @ref="CreationFormRef" EditContext="CreationContext" OnSubmit="@SoumettreFormulaireCreation" Model="ModelAvoir">
							<DataAnnotationsValidator />
							<div class="PopupAvoir__Formulaire__Item">
								<label class="PopupAvoir__Formulaire__Item__Label">
									*Référence Avoir
								</label>
								<SfTextBox @bind-Value="ModelAvoir.RefAvoir"></SfTextBox>
								<ValidationMessage For="@(() => ModelAvoir.RefAvoir)" />
							</div>
							<div class="PopupAvoir__Formulaire__Item">
								<label class="PopupAvoir__Formulaire__Item__Label">
									*Agence de voyage
								</label>
								<SfDropDownList TItem="Agencevoyage" TValue="int" @bind-Value="ModelAvoir.IDAgenceVoyage" PopupHeight="230px" Placeholder="ASKY..." DataSource="@AgencesDeVoyages">
									<DropDownListFieldSettings Text="Libelleagencevoyage" Value="Idagencevoyage" />
									<DropDownListEvents TItem="Agencevoyage" TValue="int"></DropDownListEvents>
									<DropDownListTemplates TItem="Agencevoyage">
										<NoRecordsTemplate>
											<span> Aucune donnée disponible.</span>
										</NoRecordsTemplate>
									</DropDownListTemplates>
								</SfDropDownList>
								<ValidationMessage For="@(() => ModelAvoir.IDAgenceVoyage)" />
							</div>
							<div class="PopupAvoir__Formulaire__Item">
								<label class="PopupAvoir__Formulaire__Item__Label">
									*Date d'émission
								</label>
								<SfDatePicker TValue="DateTime" @bind-Value="@ModelAvoir.DateEmission"></SfDatePicker>
								<ValidationMessage For="@(() => ModelAvoir.DateEmission)" />
							</div>
							<div class="PopupAvoir__Formulaire__Item">
								<label class="PopupAvoir__Formulaire__Item__Label">
									*Pièces Jointes
								</label>
								<div class="PopupAvoir__Formulaire__Item__FileInput" onclick="document.getElementById('ChampPiecesJointes').click();">Ajouter des Pièces Jointes</div>
								<div>
									@{
										foreach (var item in FichiersJoints)
										{
											<div class="PopupAvoir__Formulaire__Item__File">
												@item.Name
											</div>
										}
									}
								</div>
							</div>
							<div class="PopupAvoir__Formulaire__Item">
								<label class="PopupAvoir__Formulaire__Item__Label">
									Observation
								</label>
								<SfTextBox Multiline=true Placeholder="Entrez une observation ici..." @bind-Value="ModelAvoir.Observation"></SfTextBox>
								<ValidationMessage For="@(() => ModelAvoir.Observation)" />
							</div>
						</EditForm>
					</div>
					<div class="PopupAvoir__Remboursements">
						<div class="PopupAvoir__Remboursements__Nombre">
							<label>
								*Nombre de billets remboursés
							</label>
							<SfNumericTextBox Max="20" Placeholder="Entrez le nombre de remboursements" Value="@NombreDeTitreRembPourAvoirEnCours" @oninput="ChangerNombreRembAvoir"></SfNumericTextBox>
						</div>
						<div class="PopupAvoir__Remboursements__Liste">
							@foreach (var i in Enumerable.Range(0, NombreDeTitreRembPourAvoirEnCours))
							{
								var ii = i;

								<div class="PopupAvoir__Remboursements__Liste__Item">
									<SfTextBox ValueChanged="@((val) => ChangerValeurRefTitre(ii, val))" Placeholder="Référence" Value="@ListeRembAvoirSaisie[ii].Item1"></SfTextBox>
									<SfNumericTextBox TValue="decimal" OnInput="(e) => ChangerValeurMontantTitre(ii, e)"  Placeholder="Entrez le nombre de remboursements" Value="@ListeRembAvoirSaisie[ii].Item2"></SfNumericTextBox>
								</div>
							}
							<div class="PopupAvoir__Remboursements__Liste__Total GTT_Titre3">
								Total : @TotalAvoir.ToString("N2", new CultureInfo("fr-FR")) FCFA
							</div>
						</div>
					</div>
				</div>
				<div class="PopupAvoir__Contenu__Soumission">
					<button @onclick="SoumettreFormulaireCreation" type="submit" class="GTTbutton GTT_Button_Positive PopupAvoir__Contenu__Soumission__Item">
						Enregistrer
					</button>
				</div>
			</div>
			<InputFile id="ChampPiecesJointes" accept=".pdf" style="display: none;" multiple OnChange="@ChargerFichiers" />
		</Content>
	</DialogTemplates>
	<DialogEvents OnClose="@EffacerFormulaireCreation" />
</SfDialog>
<SfDialog Height="1000px" Width="1200px" ShowCloseIcon IsModal @bind-Visible="SiPopupModificationVisible">
	<DialogTemplates>
		<Header>
			<div class="ModalHeader">
				<div class="ModalHeader__Title GTT_Titre2">Modifier un Avoir</div>
				<div class="ModalHeader__Subtitle GTT_Body16">Remplissez le formulaire pour modifier le Avoir.</div>
			</div>
		</Header>
		<Content>
			<div class="PopupAvoir__Contenu">
				<div class="PopupAvoir__Contenu__Haut">
					<div class="PopupAvoir__Formulaire">
						@if (!SiModifierAvoir)
						{
							<div class="PopupAvoir__Formulaire__Item">
								<button @onclick="ActiverModificationAvoir" type="submit" class="GTTbutton GTT_Button_Positive">
									Modifier
								</button>
							</div>
						}
						<EditForm @ref="ModificationFormRef" EditContext="ModificationContext" OnSubmit="@SoumettreFormulaireCreation" Model="ModelAvoir">
							<DataAnnotationsValidator />
							<div class="PopupAvoir__Formulaire__Item">
								<label class="PopupAvoir__Formulaire__Item__Label">
									*Référence Avoir
								</label>
								<SfTextBox Enabled="SiModifierAvoir" Placeholder="Ex NC0382A17..." @bind-Value="ModelAvoir.RefAvoir"></SfTextBox>
								<ValidationMessage For="@(() => ModelAvoir.RefAvoir)" />
							</div>
							<div class="PopupAvoir__Formulaire__Item">
								<label class="PopupAvoir__Formulaire__Item__Label">
									*Agence de voyage
								</label>
								<SfDropDownList Enabled="SiModifierAvoir" TItem="Agencevoyage" TValue="int" @bind-Value="ModelAvoir.IDAgenceVoyage" PopupHeight="230px" Placeholder="ASKY..." DataSource="@AgencesDeVoyages">
									<DropDownListFieldSettings Text="Libelleagencevoyage" Value="Idagencevoyage" />
									<DropDownListEvents TItem="Agencevoyage" TValue="int"></DropDownListEvents>
									<DropDownListTemplates TItem="Agencevoyage">
										<NoRecordsTemplate>
											<span> Aucune donnée disponible.</span>
										</NoRecordsTemplate>
									</DropDownListTemplates>
								</SfDropDownList>
								<ValidationMessage For="@(() => ModelAvoir.IDAgenceVoyage)" />
							</div>
							<div class="PopupAvoir__Formulaire__Item">
								<label class="PopupAvoir__Formulaire__Item__Label">
									*Date d'émission
								</label>
								<SfDatePicker Enabled="SiModifierAvoir" TValue="DateTime" @bind-Value="@ModelAvoir.DateEmission"></SfDatePicker>
								<ValidationMessage For="@(() => ModelAvoir.DateEmission)" />
							</div>
							<div class="PopupAvoir__Formulaire__Item">
								<label class="PopupAvoir__Formulaire__Item__Label">
									*Pièces Jointes
								</label>
								
								@if(SiModifierAvoir){
									<div class="PopupAvoir__Formulaire__Item__FileInput" onclick="document.getElementById('ChampPiecesJointes').click();">Ajouter des Pièces Jointes</div>
								}
								<div>
									@{
										foreach (var item in FichiersJoints)
										{
											<div class="PopupAvoir__Formulaire__Item__File">
												@item.Name
											</div>
										}
									}
								</div>
								<div>
									@{
										var indexFichier = 1;
										foreach (var fichier in ModelFichiersJoints)
										{
											var nomFichierAfficher = $"{fichier.Nom}";
											<div class="GTT_PieceJointe">
												<img src="/images/pdf.svg" width="48" height="48" />
												<span class="GTT_PieceJointe__Label">@nomFichierAfficher</span>
												<div class="GTT_PieceJointe__Actions">
													<div @onclick="() => AfficherFichierSurNouvellePage(fichier.CheminAbsolu, nomFichierAfficher)" class="GTT_Icon_Button GTT_Icon_Button_Eye">
														<img src="/images/eye_icon_bouton.svg" width="24" height="24" />
													</div>
													@if (SiModifierAvoir)
													{
														<div @onclick="() => AfficherModalSuppressionPieceJointe(fichier.Nom)" class="GTT_Icon_Button GTT_Icon_Button_Trash">
															<img src="/images/trash_icon_bouton.svg" width="24" height="24" />
														</div>
													}
												</div>
											</div>
											indexFichier++;
										}
									}
								</div>
							</div>
							<div class="PopupAvoir__Formulaire__Item">
								<label class="PopupAvoir__Formulaire__Item__Label">
									Observation
								</label>
								<SfTextBox Enabled="SiModifierAvoir" Multiline=true Placeholder="Entrez une orservation ici..." @bind-Value="ModelAvoir.Observation"></SfTextBox>
								<ValidationMessage For="@(() => ModelAvoir.Observation)" />
							</div>
						</EditForm>
					</div>
					<div class="PopupAvoir__Remboursements">
						@*@{
							if (SiAvoirRenvoi)
							{
								<MessageRenvoi NomRenvoyeur="AQUEREBURU" DateDeRenvoi="DateTime.Now" MotifDeRenvoi="Pas de pièces jointes" />
							}
						}*@
						<div class="PopupAvoir__Remboursements__Nombre">
							<label>
								*Nombre de billets remboursés
							</label>
							<SfNumericTextBox Enabled="SiModifierAvoir" Max="20" Placeholder="Entrez le nombre de remboursements" Value="@NombreDeTitreRembPourAvoirEnCours" @oninput="ChangerNombreRembAvoir"></SfNumericTextBox>
						</div>
						<div class="PopupAvoir__Remboursements__Liste">
							@foreach (var i in Enumerable.Range(0, NombreDeTitreRembPourAvoirEnCours))
							{
								var ii = i;

								<div class="PopupAvoir__Remboursements__Liste__Item">
									<SfTextBox Enabled="SiModifierAvoir" ValueChanged="@((val) => ChangerValeurRefTitre(ii, val))" Placeholder="Référence" Value="@ListeRembAvoirSaisie[ii].Item1"></SfTextBox>
									<SfNumericTextBox Enabled="SiModifierAvoir" TValue="decimal" OnInput="(e) => ChangerValeurMontantTitre(ii, e)" Placeholder="Entrez le nombre de remboursements" Value="@ListeRembAvoirSaisie[ii].Item2"></SfNumericTextBox>
								</div>
							}
							<div class="PopupAvoir__Remboursements__Liste__Total GTT_Titre3">
								Total : @TotalAvoir.ToString("N2", new CultureInfo("fr-FR")) FCFA
							</div>
						</div>
					</div>
				</div>
				<div class="PopupAvoir__Contenu__Soumission">
					@if (SiModifierAvoir)
					{
						<button @onclick="SoumettreFormulaireModification" type="submit" class="GTTbutton GTT_Button_Positive PopupAvoir__Contenu__Soumission__Item">
							Enregistrer
						</button>
					}
				</div>
			</div>
			<InputFile id="ChampPiecesJointes" accept=".pdf" style="display: none;" multiple OnChange="@ChargerFichiers" />
		</Content>
	</DialogTemplates>
	<DialogEvents OnClose="@EffacerFormulaireModification" />
</SfDialog>

<Modal Titre="Suppression"
	   Description="Souhaitez-vous supprimer la avoir ?"
	   SiModalVisible="SiPopupSupprimerAvoirVisible"
	   OnPositiveClickCallback="@SupprimerAvoirVisible"
	   OnNegativeClickCallback="@AnnulerSupprimerAvoirVisible" />
@*
<Modal Titre="Envoyer pour validation"
	   Description="Souhaitez-vous envoyer le(s) avoir(s) à l'étape supérieure ?"
	   SiModalVisible="SiPopupEnvoyerAvoirVisible"
	   OnPositiveClickCallback="@EnvoyerAvoirEnEtapeSuperieure"
	   OnNegativeClickCallback="@AnnulerEnvoyerAvoirEnEtapeSuperieure" />*@

<div class="Page">
	<div class="Page__Header">
		<div class="Page__Header__Titre GTT_Titre3">Saisie de avoirs</div>
		<div class="Page__Header__Body">
			<form class="Page__Header__Formulaire" @onsubmit="RafraichirListeAvoir" method="POST">
				@*<div style="display: flex;
								flex-direction: row;
								align-items: center;
								column-gap: 20px;
								">
					<SfRadioButton @onchange="RafraichirListeAvoir" Label="En traitement" Name="Status" Value="EnCours" @bind-Checked="Statut"></SfRadioButton>
					<SfRadioButton @onchange="RafraichirListeAvoir" Label="Validés" Name="Status" Value="Valides" @bind-Checked="Statut"></SfRadioButton>
					<SfRadioButton @onchange="RafraichirListeAvoir" Label="Rejetés" Name="Status" Value="Rejetes" @bind-Checked="Statut"></SfRadioButton>
				</div>*@
				<SfTextBox Width="200px" Placeholder="Rechercher" ID="TermeDeRecherche" @bind-Value="TermeDeRecherche"></SfTextBox>
				<div style="display: flex; align-items: center; column-gap: 20px;">
					<div>Du</div>
					<SfDatePicker Width="140px" TValue="DateTime?" @bind-Value="@DateDebut"></SfDatePicker>Avoir
					<div>Au</div>
					<SfDatePicker Width="140px" TValue="DateTime?" @bind-Value="@DateFin"></SfDatePicker>
				</div>
				<SfButton IsPrimary type="submit">Rafraichir</SfButton>
			</form>
			<div class="Page__Header__Body__Actions">
				<button @onclick="OuvrirPopupCreerAvoir" disabled="@SiPopupSaisieVisible" class="GTTbutton GTT_Button_Positive">
					Nouveau
				</button>
@*				<button @onclick="OuvrirPopupEnvoyerAvoir" disabled="@(ListeIDAvoirSelectionnes.Count == 0)" class="GTTbutton GTT_Button_Validation">
					Envoyer
				</button>*@
			</div>
		</div>
	</div>
	<div class="Page__Tableau">
		<SfGrid DataSource="@ListeAvoirs" TValue="AffichageAvoir" RowHeight="60">
			<GridSelectionSettings CheckboxOnly></GridSelectionSettings>
			<GridEvents RowSelected="RowSelectHandlerAvoir" RowDeselected="@RowDeselectHandlerAvoir" TValue="AffichageAvoir"></GridEvents>
			<GridColumns>
				<GridColumn Type="ColumnType.CheckBox" Width="50"></GridColumn>
				<GridColumn Field=@nameof(AffichageAvoir.RefAvoir) HeaderText="N° Avoir" TextAlign="TextAlign.Left" Width="120"></GridColumn>
				<GridColumn Field="@nameof(AffichageAvoir.DateSaisie)" HeaderText="Date & Heure de saisie" Width="200">
					<Template>
						@{
							var Details = context as AffichageAvoir;
							if (Details.DateSaisie.HasValue)
							{
								<div>@(Details.DateSaisie.Value.ToString("dd MMMM yyyy HH:mm"))</div>
							}
						}
					</Template>
				</GridColumn>
				<GridColumn Field=@nameof(AffichageAvoir.LibelleAgence) HeaderText="Agence" TextAlign="TextAlign.Left" Width="120"></GridColumn>
				<GridColumn Field=@nameof(AffichageAvoir.Observation) HeaderText="Observation" TextAlign="TextAlign.Left" Width="120"></GridColumn>
				<GridColumn HeaderText="Actions" TextAlign="TextAlign.Left">
					<Template>
						@{
							var Details = (context as AffichageAvoir);
							<div style="display: flex; column-gap: 20px;">
								<button @onclick="@(()=> RowOuvrirPopupModificationAvoir(Details.IDAvoir))" class="GTT_Icon_Button GTT_Icon_Button_Pencil">
									<img src="/images/pencil_icon_bouton.svg" width="24" height="24" />
								</button>
								<button @onclick="@(()=> RowOuvrirPopupSuppressionAvoir(Details.IDAvoir))" class="GTT_Icon_Button GTT_Icon_Button_Trash">
									<img src="/images/trash_icon_bouton.svg" width="24" height="24" />
								</button>
							</div>
						}
					</Template>
				</GridColumn>
				<GridTemplates>
					<EmptyRecordTemplate Context="contextNoRecord">
						<EspaceVide Contenu="Ajoutez un Avoir pour voir apparaître des éléments dans la liste." />
					</EmptyRecordTemplate>
				</GridTemplates>
			</GridColumns>
		</SfGrid>
	</div>
</div>

@code {
	private bool SiPopupSaisieVisible { get; set; } = false;
	private bool SiPopupModificationVisible { get; set; } = false;
	private bool SiPopupEnvoyerAvoirVisible { get; set; } = false;
	private bool SiPopupSupprimerAvoirVisible { get; set; } = false;

	private bool SiModifierAvoir { get; set; } = false;

	private int IDAvoirAModifier = 0;
	private int IDAvoirASupprimer = 0;

	private EditContext CreationContext;
	private EditContext ModificationContext;

	private EditForm? CreationFormRef;
	private EditForm? ModificationFormRef;

	private decimal TotalAvoir  = new Decimal(0);
	private int NombreDeTitreRembPourAvoirEnCours = 0;
	private int nombreDeFichiersAutorises = 2;
	private List<Agencevoyage>? AgencesDeVoyages;
	private CreerAvoirModel ModelAvoir = new CreerAvoirModel();
	private List<IBrowserFile> FichiersJoints = new List<IBrowserFile>();
	private List<FichierAfficher> ModelFichiersJoints = new List<FichierAfficher>();

	private LigneRemboursement LigneRembModel = new LigneRemboursement();

	List<(string, decimal)> ListeRembAvoirSaisie = new List<(string, decimal)>();

	//private bool SiAvoirRenvoi = true;

	private string Statut { get; set; } = "EnCours";
	private List<int> ListeIDAvoirSelectionnes = new List<int>();
	private string TermeDeRecherche { get; set; } = String.Empty;
	private DateTime? DateFin { get; set; } = DateTime.Now.AddDays(20);
	private DateTime? DateDebut { get; set; } = DateTime.Now.AddDays(-20);

	private string NomPjASupprimer = String.Empty;
	private bool SiSupressionPJPopupVisible = false;

	private List<AffichageAvoir> ListeAvoirs = new List<AffichageAvoir>();

	protected async override Task OnInitializedAsync()
	{
		AgencesDeVoyages = await agenceDeVoyageService.ObtenirAgencesDeVoyages();
		await RafraichirListeAvoir();
	}

	private async Task RafraichirListeAvoir()
	{
		ListeIDAvoirSelectionnes.Clear();
		


	}

	private async void CreerAvoir()
	{
		try
		{
			notificationUIService.MontrerChargement();


			notificationUIService.AfficherMessage(new NotificationData()
				{
					Message = "Avoir Créé avec succès.",
					TypeMessage = TypeDeNotification.Succes
				});
			notificationUIService.CacherChargement();
			SiPopupSaisieVisible = false;
			await RafraichirListeAvoir();
			StateHasChanged();
		}
		catch (Exception exception)
		{
			notificationUIService.CacherChargement();
			AfficherMessageErreur(exception);
		}
	}

	private async void ModifierAvoir()
	{
		try
		{
			notificationUIService.MontrerChargement();


			notificationUIService.AfficherMessage(new NotificationData()
				{
					Message = "Avoir mis à jour avec succès.",
					TypeMessage = TypeDeNotification.Succes
				});

			IDAvoirAModifier = 0;
			SiPopupModificationVisible = false;
			notificationUIService.CacherChargement();
			await RafraichirListeAvoir();
			StateHasChanged();
		}
		catch (Exception exception)
		{
			notificationUIService.CacherChargement();
			AfficherMessageErreur(exception);
		}
	}

	private void EffacerFormulaireModification()
	{
		SiModifierAvoir = false;
		ModelAvoir = new CreerAvoirModel();

		if (FichiersJoints != null)
		{
			FichiersJoints.Clear();
		}

		IDAvoirAModifier = 0;
		ModelFichiersJoints.Clear();
	}

	private void RechercherTitresAchoisir(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int, Agencevoyage> args)
	{
		try
		{
			var IDPrestataire = args.Value;
			ModelAvoir.IDAgenceVoyage = args.Value;


			StateHasChanged();
		}
		catch (Exception exception)
		{
			AfficherMessageErreur(exception);
		}
	}

	private void OuvrirPopupCreerAvoir()
	{
		SiPopupSaisieVisible = true;
	}

	private async void RowOuvrirPopupModificationAvoir(int IDAvoir)
	{
		try
		{
			IDAvoirAModifier = IDAvoir;
			notificationUIService.MontrerChargement();

			//ListeRembAvoirSaisie.Add(("AZER", new Decimal(10)));
			//ListeRembAvoirSaisie.Add(("AZER", new Decimal(10)));
			//ListeRembAvoirSaisie.Add(("AZER", new Decimal(10)));
			//ListeRembAvoirSaisie.Add(("AZER", new Decimal(10)));

			NombreDeTitreRembPourAvoirEnCours = 4;

			TotalAvoir = ListeRembAvoirSaisie.Select(remb => remb.Item2).Sum();


			notificationUIService.CacherChargement();
			SiPopupModificationVisible = true;
			StateHasChanged();
		}
		catch (Exception exception)
		{
			AfficherMessageErreur(exception);
		}
	}

	private void RowOuvrirPopupSuppressionAvoir(int IDBonDePassage)
	{
		IDAvoirASupprimer = IDBonDePassage;
		SiPopupSupprimerAvoirVisible = true;
	}

	private void OuvrirPopupEnvoyerAvoir()
	{
		SiPopupEnvoyerAvoirVisible = true;
	}

	private void EffacerFormulaireCreation()
	{
		if (FichiersJoints != null)
		{
			FichiersJoints.Clear();
		}

		ModelFichiersJoints.Clear();
		ModelAvoir = new CreerAvoirModel();
	}

	private void ActiverModificationAvoir()
	{
		SiModifierAvoir = true;
		StateHasChanged();
	}

	private void SoumettreFormulaireCreation()
	{

		if (CreationFormRef.EditContext.Validate())
		{
			////CreerAvoir();
		}
	}

	private void SoumettreFormulaireModification()
	{
		if (ModificationFormRef.EditContext.Validate())
		{
			ModifierAvoir();
		}
	}

	private async void EnvoyerAvoirEnEtapeSuperieure()
	{
		try
		{
			notificationUIService.MontrerChargement();
			notificationUIService.AfficherMessage(new NotificationData()
				{
					Message = "Avoir(s) envoyé(s) à l'étape supérieure.",
					TypeMessage = TypeDeNotification.Succes
				});

			SiPopupEnvoyerAvoirVisible = false;
			await RafraichirListeAvoir();
			StateHasChanged();
			notificationUIService.CacherChargement();
		}
		catch (Exception exception)
		{
			AfficherMessageErreur(exception);
		}
	}

	private void AnnulerEnvoyerAvoirEnEtapeSuperieure()
	{
		SiPopupEnvoyerAvoirVisible = false;
	}

	private async void SupprimerAvoirVisible()
	{
		try
		{
			notificationUIService.MontrerChargement();
			notificationUIService.AfficherMessage(new NotificationData()
				{
					Message = "Avoir supprimé avec Succès",
					TypeMessage = TypeDeNotification.Succes
				});
			SiPopupSupprimerAvoirVisible = false;
			IDAvoirASupprimer = 0;
			notificationUIService.CacherChargement();
			await RafraichirListeAvoir();
			StateHasChanged();
		}
		catch (Exception exception)
		{
			notificationUIService.CacherChargement();
			AfficherMessageErreur(exception);
		}
	}

	private void AnnulerSupprimerAvoirVisible()
	{
		SiPopupSupprimerAvoirVisible = false;
	}

	private async void AfficherFichierSurNouvellePage(string CheminAbsoluFichier, string NomFichier)
	{
		FileStream StreamFichier = new FileStream(CheminAbsoluFichier, System.IO.FileMode.Open, System.IO.FileAccess.Read);
		MemoryStream stream = new MemoryStream();
		StreamFichier.CopyTo(stream);
		byte[] byteArray = stream.ToArray();
		await JS.InvokeAsync<object>("openStreamInNewWindow", Convert.ToBase64String(byteArray), NomFichier);
	}

	private void AfficherModalSuppressionPieceJointe(string NomPieceJointe)
	{
		NomPjASupprimer = NomPieceJointe;
		SiSupressionPJPopupVisible = true;
	}

	private async Task RafraichirInfoModification()
	{

	}

	private void RowSelectHandlerAvoir(RowSelectEventArgs<AffichageAvoir> args)
	{
		if (args.IsInteracted)
		{
			ListeIDAvoirSelectionnes.Add(args.Data.IDAvoir);
		}
		if (args.IsHeaderCheckboxClicked)
		{
			ListeIDAvoirSelectionnes.Clear();
			ListeIDAvoirSelectionnes.AddRange(ListeAvoirs.Select(e => e.IDAvoir));
		}
	}

	private void RowDeselectHandlerAvoir(RowDeselectEventArgs<AffichageAvoir> args)
	{
		if (args.IsInteracted)
		{
			ListeIDAvoirSelectionnes.Remove(args.Data.IDAvoir);
		}
		if (args.IsHeaderCheckboxClicked)
		{
			ListeIDAvoirSelectionnes.Clear();
		}
	}

	private void AfficherMessageErreur(Exception exception)
	{
		notificationUIService.CacherChargement();
		notificationUIService.AfficherMessage(new NotificationData()
			{
				Message = exception.Message,
				TypeMessage = TypeDeNotification.Erreur
			});
	}

	private void ChargerFichiers(InputFileChangeEventArgs e)
	{
		try
		{
			FichiersJoints = e.GetMultipleFiles(nombreDeFichiersAutorises).ToList();
		}
		catch (Exception exception)
		{
			AfficherMessageErreur(exception);
		}
	}

	private void ChangerValeurRefTitre(int i, String args)
	{
		var NouvelleValeur = (args, ListeRembAvoirSaisie[i].Item2);
		ListeRembAvoirSaisie[i] = NouvelleValeur;
	}

	private void ChangerValeurMontantTitre(int i, Microsoft.AspNetCore.Components.ChangeEventArgs args)
	{
		var dd = new Decimal(0);
		if (Decimal.TryParse(args.Value.ToString(), out decimal n)) dd = n;
		var NouvelleValeur = (ListeRembAvoirSaisie[i].Item1, dd);

		ListeRembAvoirSaisie[i] = NouvelleValeur;
		TotalAvoir = ListeRembAvoirSaisie.Select(remb => remb.Item2).Sum();
	}

	private void ChangerNombreRembAvoir(Microsoft.AspNetCore.Components.ChangeEventArgs Event)
	{
		NombreDeTitreRembPourAvoirEnCours = 0;
		if (Int32.TryParse(Event.Value.ToString(), out int n)) NombreDeTitreRembPourAvoirEnCours = n;
		ListeRembAvoirSaisie.Clear();
		ListeRembAvoirSaisie.AddRange(Enumerable.Range(0, NombreDeTitreRembPourAvoirEnCours).Select(_ => (new String(""), new Decimal(0))));
		StateHasChanged();
	}
}