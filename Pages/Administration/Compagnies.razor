@page "/administration/compagnies"
@layout AdministrationLayout
@inject INotificationUIService notificationUIService
@inject IGestionCompagnieService gestionCompagnieService

<SfDialog Height="400" Width="600" ShowCloseIcon IsModal @bind-Visible="SiPopupSaisieVisible">
	<DialogTemplates>
		<Header>
			<div class="PopupCompagnie__EnTete">
				<div class="GTT_Titre2">Créer une Compagnie de voyage</div>
				<div class="GTT_Body16">Remplissez le formulaire pour créer une Compagnie de voyage.</div>
			</div>
		</Header>
		<Content>
			<div class="PopupCompagnie__Contenu">
				<div class="PopupCompagnie__Formulaire">
					<EditForm OnSubmit="@CreerCompagnieVoyage" Model="ModelCompagnie">
						<DataAnnotationsValidator />
						<div class="PopupCompagnie__Formulaire__Item">
							<label class="PopupCompagnie__Formulaire__Item__Label">
								Libellé Compagnie
							</label>
							<SfTextBox Placeholder="Entrez la Compagnie..." @bind-Value="ModelCompagnie.LibelleCompagnie"></SfTextBox>
							<ValidationMessage For="@(() => ModelCompagnie.LibelleCompagnie)" />
						</div>
						<button class="GTTbutton GTT_Button_Positive PopupCompagnie__Formulaire__Submit">
							Enregistrer
						</button>
					</EditForm>
				</div>
			</div>
		</Content>
	</DialogTemplates>
	<DialogEvents OnClose="@EffacerFormulaireCreation" />
</SfDialog>
<SfDialog Height="400" Width="600" ShowCloseIcon IsModal @bind-Visible="SiPopupModificationVisible">
	<DialogTemplates>
		<Header>
			<div class="PopupCompagnie__EnTete">
				<div class="GTT_Titre2">Modifier une Compagnie</div>
				<div class="GTT_Body16">Remplissez le formulaire pour modifier une Compagnie.</div>
			</div>
		</Header>
		<Content>
			<div class="PopupCompagnie__Contenu">
				<div class="PopupCompagnie__Formulaire">
					<EditForm OnSubmit="@ModifierCompagnieVoyage" Model="ModelCompagnie">
						<DataAnnotationsValidator />
						<div class="PopupCompagnie__Formulaire__Item">
							<label class="PopupCompagnie__Formulaire__Item__Label">
								Libellé Compagnie
							</label>
							<SfTextBox Placeholder="Entrez la Compagnie..." @bind-Value="ModelCompagnie.LibelleCompagnie"></SfTextBox>
							<ValidationMessage For="@(() => ModelCompagnie.LibelleCompagnie)" />
						</div>
						<button class="GTTbutton GTT_Button_Positive PopupCompagnie__Formulaire__Submit">
							Enregistrer
						</button>
					</EditForm>
				</div>
			</div>
		</Content>
	</DialogTemplates>
	<DialogEvents OnClose="@EffacerFormulaireModification" />
</SfDialog>

<Modal Titre="Suppression"
	   Description="Souhaitez-vous supprimer la Compagnie ?"
	   SiModalVisible="SiPopupSupprimerCompagnieVisible"
	   OnPositiveClickCallback="@SupprimerCompagnieVisible"
	   OnNegativeClickCallback="@AnnulerSupprimerCompagnieVisible" />

<div class="Page">
	<div class="Page__Header">
		<div class="Page__Header__Titre GTT_Titre3">Gestion des Compagnies</div>
		<div class="Page__Header__Body">
			<form class="Page__Header__Formulaire" @onsubmit="RafraichirListeCompagnies" method="POST">
				<SfTextBox Width="200px" Placeholder="Rechercher" ID="TermeDeRecherche" @bind-Value="TermeDeRecherche"></SfTextBox>
				<SfButton IsPrimary type="submit">Rafraichir</SfButton>
			</form>
			<div class="Page__Header__Body__Actions">
				<button @onclick="OuvrirPopupCreerCompagnie" disabled="@SiPopupSaisieVisible" class="GTTbutton GTT_Button_Positive">
					Nouvelle Compagnie
				</button>
			</div>
		</div>
	</div>
	<div class="Page__Tableau">
		<SfGrid DataSource="@ListeCompagnies" TValue="AffichageCompagnie" RowHeight="60">
			<GridSelectionSettings CheckboxOnly></GridSelectionSettings>
			<GridEvents RowSelected="RowSelectHandlerCompagnie" RowDeselected="@RowDeselectHandlerCompagnie" TValue="AffichageCompagnie"></GridEvents>
			<GridColumns>
				<GridColumn Type="ColumnType.CheckBox" Width="50"></GridColumn>
				<GridColumn Field=@nameof(AffichageCompagnie.Libellecompagnie) HeaderText="Libellé compagnie" TextAlign="TextAlign.Left" Width="200"></GridColumn>
				<GridColumn Field="@nameof(AffichageCompagnie.Dateagentenrcompagnie)" HeaderText="Date & Heure de saisie" Width="200">
					<Template>
						@{
							var Details = context as AffichageCompagnie;
							<div>@(Details.Dateagentenrcompagnie.ToString("dd MMMM yyyy HH:mm"))</div>
						}
					</Template>
				</GridColumn>
				<GridColumn HeaderText="Actions" TextAlign="TextAlign.Left" Width="200">
					<Template>
						@{
							var Details = (context as AffichageCompagnie);
							<div style="display: flex; column-gap: 20px;">
								<button @onclick="@(()=> RowOuvrirPopupModificationCompagnie(Details.Idcompagnie))" class="GTT_Icon_Button GTT_Icon_Button_Pencil">
									<img src="/images/pencil_icon_bouton.svg" width="24" height="24" />
								</button>
								@*<button @onclick="@(()=> RowOuvrirPopupSuppressionCompagnie(Details.Idcompagnie))" class="GTT_Icon_Button GTT_Icon_Button_Trash">
									<img src="/images/trash_icon_bouton.svg" width="24" height="24" />
								</button>*@
							</div>
						}
					</Template>
				</GridColumn>
				<GridTemplates>
					<EmptyRecordTemplate Context="contextNoRecord">
						<EspaceVide Contenu="Ajoutez un Facture pour voir apparaître des éléments dans la liste." />
					</EmptyRecordTemplate>
				</GridTemplates>
			</GridColumns>
		</SfGrid>
	</div>
</div>

@code {
	private bool SiPopupSaisieVisible { get; set; } = false;
	private bool SiPopupModificationVisible { get; set; } = false;
	private bool SiPopupSupprimerCompagnieVisible { get; set; } = false;

	private int IdcompagnieAModifier = 0;
	private int IdcompagnieASupprimer = 0;

	private EditContext CreationContext;
	private EditContext ModificationContext;

	private EditForm? CreationFormRef;
	private EditForm? ModificationFormRef;

	private CreerCompagnieModel ModelCompagnie = new CreerCompagnieModel();

	private string Statut { get; set; } = "EnCours";
	private string TermeDeRecherche { get; set; } = String.Empty;

	private List<int> ListeIdcompagniesVoyage = new List<int>();
	private List<AffichageCompagnie> ListeCompagnies = new List<AffichageCompagnie>();

	protected async override Task OnInitializedAsync()
	{
		await RafraichirListeCompagnies();
	}

	private async Task RafraichirListeCompagnies()
	{
		ListeCompagnies = await gestionCompagnieService.ObtenirListeCompagnie(new RechercheCompagnieModel()
		{
			TermeDeRecherche = TermeDeRecherche
		});
	}

	private async void CreerCompagnieVoyage()
	{
		try
		{
			notificationUIService.MontrerChargement();

			await gestionCompagnieService.CreerCompagnie(ModelCompagnie.LibelleCompagnie);

			notificationUIService.AfficherMessage(new NotificationData()
				{
					Message = "Compagnie Créée avec succès.",
					TypeMessage = TypeDeNotification.Succes
				});
			notificationUIService.CacherChargement();
			SiPopupSaisieVisible = false;
			await RafraichirListeCompagnies();
			StateHasChanged();
		}
		catch (Exception exception)
		{
			notificationUIService.CacherChargement();
			AfficherMessageErreur(exception);
		}
	}

	private async void ModifierCompagnieVoyage()
	{
		try
		{
			notificationUIService.MontrerChargement();

			await gestionCompagnieService.ModifierCompagnie(IdcompagnieAModifier, ModelCompagnie.LibelleCompagnie);

			notificationUIService.AfficherMessage(new NotificationData()
				{
					Message = "Compagnie mise à jour avec succès.",
					TypeMessage = TypeDeNotification.Succes
				});
			IdcompagnieAModifier = 0;
			SiPopupModificationVisible = false;
			notificationUIService.CacherChargement();
			await RafraichirListeCompagnies();
			StateHasChanged();
		}
		catch (Exception exception)
		{
			notificationUIService.CacherChargement();
			AfficherMessageErreur(exception);
		}
	}

	private void EffacerFormulaireModification()
	{
		ModelCompagnie = new CreerCompagnieModel();
	}

	private void OuvrirPopupCreerCompagnie()
	{
		SiPopupSaisieVisible = true;
	}

	private async void RowOuvrirPopupModificationCompagnie(int Idcompagnie)
	{
		try
		{
			IdcompagnieAModifier = Idcompagnie;
			notificationUIService.MontrerChargement();

			var Resultat = await gestionCompagnieService.ObtenirDetailsCompagnie(Idcompagnie);

			ModelCompagnie.LibelleCompagnie = Resultat.Libellecompagnie;

			notificationUIService.CacherChargement();
			Task.Delay(1000);
			SiPopupModificationVisible = true;
			StateHasChanged();
		}
		catch (Exception exception)
		{
			AfficherMessageErreur(exception);
		}
	}

	private void RowOuvrirPopupSuppressionCompagnie(int Idcompagnie)
	{
		IdcompagnieASupprimer = Idcompagnie;
		SiPopupSupprimerCompagnieVisible = true;
	}

	private void EffacerFormulaireCreation()
	{
		ModelCompagnie = new CreerCompagnieModel();
	}

	private async void SupprimerCompagnieVisible()
	{
		try
		{
			notificationUIService.MontrerChargement();

			await gestionCompagnieService.SupprimerCompagnie(IdcompagnieASupprimer);

			notificationUIService.AfficherMessage(new NotificationData()
				{
					Message = "Compagnie supprimée avec Succès",
					TypeMessage = TypeDeNotification.Succes
				});
			SiPopupSupprimerCompagnieVisible = false;
			IdcompagnieASupprimer = 0;
			notificationUIService.CacherChargement();
			await RafraichirListeCompagnies();
			StateHasChanged();
		}
		catch (Exception exception)
		{
			notificationUIService.CacherChargement();
			AfficherMessageErreur(exception);
		}
	}

	private void AnnulerSupprimerCompagnieVisible()
	{
		SiPopupSupprimerCompagnieVisible = false;
	}

	private void RowSelectHandlerCompagnie(RowSelectEventArgs<AffichageCompagnie> args)
	{
		if (args.IsInteracted)
		{
			ListeIdcompagniesVoyage.Add(args.Data.Idcompagnie);
		}
		if (args.IsHeaderCheckboxClicked)
		{
			ListeIdcompagniesVoyage.Clear();
			ListeIdcompagniesVoyage.AddRange(ListeCompagnies.Select(e => e.Idcompagnie));
		}
	}

	private void RowDeselectHandlerCompagnie(RowDeselectEventArgs<AffichageCompagnie> args)
	{
		if (args.IsInteracted)
		{
			ListeIdcompagniesVoyage.Remove(args.Data.Idcompagnie);
		}
		if (args.IsHeaderCheckboxClicked)
		{
			ListeIdcompagniesVoyage.Clear();
		}
	}

	private void AfficherMessageErreur(Exception exception)
	{
		notificationUIService.CacherChargement();
		notificationUIService.AfficherMessage(new NotificationData()
			{
				Message = exception.Message,
				TypeMessage = TypeDeNotification.Erreur
			});
	}
}