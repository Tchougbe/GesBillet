@page "/saisie-remboursement"

@inject ICompagnieService compagnieService
@inject IAgenceDeVoyageService agenceDeVoyageService
@inject INotificationUIService notificationUIService
@inject ISaisieRembService saisieRembService
@inject IJSRuntime JS
@inject IWebHostEnvironment Environment


<SfDialog Width="80%" Height="90%" ShowCloseIcon IsModal @bind-Visible="SiPopupSaisieVisible">
	<DialogTemplates>
		<Header>
			<div class="PopupRemb__EnTete">
				<div class="GTT_Titre2">Marquer un titre de transport en remboursement</div>
				<div class="GTT_Body16">Remplissez le formulaire pour mettre un titre en remboursement.</div>
			</div>
		</Header>
		<Content>
			<div class="PopupRemb__Contenu">
				<div class="PopupRemb__Formulaire">
					<div class="PopupRemb__Formulaire__Item">
						<label>Référence du titre de transport</label>
						<SfTextBox @bind-Value="ModelRemb.RefTitre"></SfTextBox>
						<div class="PopupRemb__Formulaire__Item__Verifier" @onclick="VerifierRefTitre">Vérifier</div>
					</div>
					<div class="PopupRemb__Formulaire__Item">
						Routing Initial : @RoutingTitreRemEnCours
					</div>
					@if (RoutingTitreRemEnCours is not null && RoutingTitreRemEnCours.Length > 0)
					{
						<div class="PopupRemb__Formulaire__Item">
							<label class="PopupRemb__Formulaire__Item__Label">
								Routing non utilisé
							</label>
							<SfTextBox Multiline=true @bind-Value="ModelRemb.RoutingNonUtiliser"></SfTextBox>
						</div>

						<div class="PopupRemb__Formulaire__Item">
							<label class="PopupRemb__Formulaire__Item__Label">
								Observation
							</label>
							<SfTextBox Multiline=true @bind-Value="ModelRemb.Observation"></SfTextBox>
						</div>
					}
				</div>
			</div>
		</Content>
		<FooterTemplate>
			<div class="PopupRemb__Contenu__Soumission">
				<button @onclick="SoumettreFormulaireCreation" type="submit" class="GTTbutton GTT_Button_Positive PopupRemb__Contenu__Soumission__Item">
					Enregistrer
				</button>
			</div>
		</FooterTemplate>
	</DialogTemplates>
	<DialogEvents OnClose="@EffacerFormulaireCreation" />
</SfDialog>
<SfDialog Width="90%" Height="90%" ShowCloseIcon IsModal @bind-Visible="SiPopupModificationVisible">
	<DialogTemplates>
		<Header>
			<div class="PopupRemb__EnTete">
				<div class="GTT_Titre2">Modifier un Remboursement</div>
				<div class="GTT_Body16">Remplissez le formulaire pour modifier le remboursement.</div>
			</div>
		</Header>
		<Content>
			<div class="PopupRemb__Contenu">
				<div class="PopupRemb__Formulaire">
					<div class="PopupRemb__Formulaire__Item">
						<label>Référence du titre de transport</label>
						<SfTextBox Readonly="true" @bind-Value="ModelRemb.RefTitre"></SfTextBox>
						@*<div class="PopupRemb__Formulaire__Item__Verifier" @onclick="VerifierRefTitre">Vérifier</div>*@
					</div>
					<div class="PopupRemb__Formulaire__Item">
						Routing Initial : @RoutingTitreRemEnCours
					</div>
					@if (RoutingTitreRemEnCours is not null && RoutingTitreRemEnCours.Length > 0)
					{
						<div class="PopupRemb__Formulaire__Item">
							<label class="PopupRemb__Formulaire__Item__Label">
								Routing non utilisé
							</label>
							<SfTextBox Multiline=true @bind-Value="ModelRemb.RoutingNonUtiliser"></SfTextBox>
						</div>

						<div class="PopupRemb__Formulaire__Item">
							<label class="PopupRemb__Formulaire__Item__Label">
								Observation
							</label>
							<SfTextBox Multiline=true @bind-Value="ModelRemb.Observation"></SfTextBox>
						</div>
					}
				</div>
			</div>
			@*				<div class="PopupRemb__Contenu__Haut">
			<div class="PopupRemb__Formulaire">
			<EditForm @ref="CreationFormRef" EditContext="CreationContext" OnSubmit="@SoumettreFormulaireCreation" Model="ModelRemb">
			<DataAnnotationsValidator />
			<div class="PopupRemb__Formulaire__Item">
			<label class="PopupRemb__Formulaire__Item__Label">
			Référence du billet
			</label>
			<SfTextBox @bind-Value="ModelRemb.RefTitre"></SfTextBox>
			</div>

			<div class="PopupRemb__Formulaire__Item">
			<label class="PopupRemb__Formulaire__Item__Label">
			Observation
			</label>
			<SfTextBox Multiline=true @bind-Value="ModelRemb.Observation"></SfTextBox>
			<ValidationMessage For="@(() => ModelRemb.Observation)" />
			</div>
			</EditForm>
			</div>
			<div class="PopupRemb__Contenu__Haut__Droite">
			@{
			if (SiRembRenvoi)
			{
			<MessageRenvoi NomRenvoyeur="AQUEREBURU" DateDeRenvoi="DateTime.Now" MotifDeRenvoi="Pas de pièces jointes" />
			}
			}
			</div>
			</div>*@
		</Content>
		<FooterTemplate>
			<div class="PopupRemb__Contenu__Soumission">
				<button @onclick="SoumettreFormulaireModification" class="GTTbutton GTT_Button_Positive PopupRemb__Contenu__Soumission__Item">
					Enregistrer
				</button>
			</div>
		</FooterTemplate>
	</DialogTemplates>
	<DialogEvents OnClose="@EffacerFormulaireModification" />
</SfDialog>

<Modal Titre="Suppression"
	   Description="Souhaitez-vous supprimer la facture ?"
	   SiModalVisible="SiPopupSupprimerRembVisible"
	   OnPositiveClickCallback="@SupprimerRemb"
	   OnNegativeClickCallback="@AnnulerSupprimerRemb" />

@*<Modal Titre="Envoyer pour validation"
	   Description="Souhaitez-vous envoyer le(s) facture(s) à l'étape supérieure ?"
	   SiModalVisible="SiPopupEnvoyerRembVisible"
	   OnPositiveClickCallback="@EnvoyerRembEnEtapeSuperieure"
	   OnNegativeClickCallback="@AnnulerEnvoyerRembEnEtapeSuperieure" />*@

<div class="Page">
	<div class="Page__Header">
		<div class="Page__Header__Titre GTT_Titre3">Remboursements</div>
		<div class="Page__Header__Body">
			<form class="Page__Header__Formulaire" @onsubmit="RafraichirListeRemb" method="POST">
				@*<div style="display: flex;
				flex-direction: row;
				align-items: center;
				column-gap: 20px;
				">
				<SfRadioButton @onchange="RafraichirListeRemb" Label="En traitement" Name="Status" Value="EnCours" @bind-Checked="Statut"></SfRadioButton>
				<SfRadioButton @onchange="RafraichirListeRemb" Label="Validés" Name="Status" Value="Valides" @bind-Checked="Statut"></SfRadioButton>
				<SfRadioButton @onchange="RafraichirListeRemb" Label="Rejetés" Name="Status" Value="Rejetes" @bind-Checked="Statut"></SfRadioButton>
				</div>*@
				<SfTextBox Width="200px" Placeholder="Rechercher" ID="TermeDeRecherche" @bind-Value="TermeDeRecherche"></SfTextBox>
				<div style="display: flex; align-items: center; column-gap: 20px;">
					<div>Du</div>
					<SfDatePicker Width="140px" TValue="DateTime?" @bind-Value="@DateDebut"></SfDatePicker>
					<div>Au</div>
					<SfDatePicker Width="140px" TValue="DateTime?" @bind-Value="@DateFin"></SfDatePicker>
				</div>
				<SfButton IsPrimary type="submit">Rafraichir</SfButton>
			</form>
			<div class="Page__Header__Body__Actions">
				<button @onclick="OuvrirPopupCreerRemboursement" disabled="@SiPopupSaisieVisible" class="GTTbutton GTT_Button_Positive">
					Nouveau
				</button>
				@*<button @onclick="OuvrirPopupEnvoyerFacture" disabled="@(ListeIDRembSelectionnes.Count == 0)" class="GTTbutton GTT_Button_Validation">
				Envoyer
				</button>*@
			</div>
		</div>
	</div>
	<div class="Page__Tableau">
		<SfGrid DataSource="@ListeDesRemboursements" AllowTextWrap TValue="AffichageRemboursement">
			<GridSelectionSettings CheckboxOnly></GridSelectionSettings>
			<GridEvents RowSelected="RowSelectHandlerRemb" RowDeselected="@RowDeselectHandlerRemb" TValue="AffichageRemboursement"></GridEvents>
			<GridColumns>
				<GridColumn Type="ColumnType.CheckBox" Width="50"></GridColumn>
				<GridColumn Field=@nameof(AffichageRemboursement.IDRemb) HeaderText="N° REMBOURSEMENT" TextAlign="TextAlign.Left" Width="200"></GridColumn>
				<GridColumn Field="@nameof(AffichageRemboursement.DateSaisie)" HeaderText="DATE ET HEURE DE SAISIE" Width="200">
					<Template>
						@{
							var Details = context as AffichageRemboursement;
							if (Details.DateSaisie.HasValue)
							{
								<div>@(Details.DateSaisie.Value.ToString("dd MMMM yyyy HH:mm"))</div>
							}
						}
					</Template>
				</GridColumn>
				<GridColumn Field=@nameof(AffichageRemboursement.RefTitre) HeaderText="REF. TITRE TRANS." TextAlign="TextAlign.Left" Width="200"></GridColumn>
				<GridColumn Field=@nameof(AffichageRemboursement.RoutingInitial) HeaderText="ROUTING INITIAL" TextAlign="TextAlign.Left" Width="200"></GridColumn>
				<GridColumn Field=@nameof(AffichageRemboursement.RoutingNonUtiliser) HeaderText="ROUTING NON UTILISE" TextAlign="TextAlign.Left" Width="200"></GridColumn>
				<GridColumn Field=@nameof(AffichageRemboursement.Observation) HeaderText="OBSERVATION" TextAlign="TextAlign.Left" Width="200"></GridColumn>
				<GridColumn HeaderText="ACTIONS" TextAlign="TextAlign.Left">
					<Template>
						@{
							var Details = (context as AffichageRemboursement);
							<div style="display: flex; column-gap: 20px;">
								<button @onclick="@(()=> RowOuvrirPopupModificationFacture(Details.IDRemb))" class="GTT_Icon_Button GTT_Icon_Button_Pencil">
									<img src="/images/pencil_icon_bouton.svg" width="24" height="24" />
								</button>
								<button @onclick="@(()=> RowOuvrirPopupSuppressionRemb(Details.IDRemb))" class="GTT_Icon_Button GTT_Icon_Button_Trash">
									<img src="/images/trash_icon_bouton.svg" width="24" height="24" />
								</button>
							</div>
						}
					</Template>
				</GridColumn>
				<GridTemplates>
					<EmptyRecordTemplate Context="contextNoRecord">
						<EspaceVide Contenu="Ajoutez un Facture pour voir apparaître des éléments dans la liste." />
					</EmptyRecordTemplate>
				</GridTemplates>
			</GridColumns>
		</SfGrid>
	</div>
</div>

@code {
	private bool SiPopupSaisieVisible { get; set; } = false;
	private bool SiPopupModificationVisible { get; set; } = false;
	private bool SiPopupEnvoyerRembVisible { get; set; } = false;
	private bool SiPopupSupprimerRembVisible { get; set; } = false;

	private int IDRembAModifier = 0;
	private int IDRembASupprimer = 0;
	private string RoutingTitreRemEnCours { get; set; }

	private EditContext CreationContext;
	private EditContext ModificationContext;

	private EditForm? CreationFormRef;
	private EditForm? ModificationFormRef;

	private CreerRemboursementModel ModelRemb = new CreerRemboursementModel();

	//private bool SiRembRenvoi = true;

	private string Statut { get; set; } = "EnCours";
	private List<int> ListeIDRembSelectionnes = new List<int>();
	private string TermeDeRecherche { get; set; } = String.Empty;
	private DateTime? DateFin { get; set; } = DateTime.Now.AddDays(20);
	private DateTime? DateDebut { get; set; } = DateTime.Now.AddDays(-20);

	private List<AffichageRemboursement> ListeDesRemboursements = new List<AffichageRemboursement>();

	protected async override Task OnInitializedAsync()
	{
		await RafraichirListeRemb();
	}

	private async Task RafraichirListeRemb()
	{
		ListeIDRembSelectionnes.Clear();
		ListeDesRemboursements = await saisieRembService.ObtenirListeRemb(new SaisieRembRechercheModel
			{
				DateDebut = DateDebut,
				DateFin = DateFin,
				//EnCours = Statut == "EnCours",
				TermeDeRecherche = TermeDeRecherche,
				//Valides = Statut == "Valides",
			});
	}

	private async void CreerRemboursement()
	{
		try
		{
			notificationUIService.MontrerChargement();
			await saisieRembService.CreerRemboursement(ModelRemb);
			notificationUIService.AfficherMessage(new NotificationData()
				{
					Message = "Remboursement Créé avec succès.",
					TypeMessage = TypeDeNotification.Succes
				});
			notificationUIService.CacherChargement();
			SiPopupSaisieVisible = false;
			await RafraichirListeRemb();
			StateHasChanged();
		}
		catch (Exception exception)
		{
			notificationUIService.CacherChargement();
			AfficherMessageErreur(exception);
		}
	}

	private async void ModifierRemb()
	{
		try
		{
			notificationUIService.MontrerChargement();
			await saisieRembService.ModifierRemboursement(IDRembAModifier, ModelRemb);
			notificationUIService.AfficherMessage(new NotificationData()
				{
					Message = "Remboursement mis à jour avec succès.",
					TypeMessage = TypeDeNotification.Succes
				});
			IDRembAModifier = 0;
			SiPopupModificationVisible = false;
			notificationUIService.CacherChargement();
			await RafraichirListeRemb();
			StateHasChanged();
		}
		catch (Exception exception)
		{
			notificationUIService.CacherChargement();
			AfficherMessageErreur(exception);
		}
	}

	private void EffacerFormulaireModification()
	{
		ModelRemb = new CreerRemboursementModel();
		RoutingTitreRemEnCours = null;
	}

	private void RechercherTitresAchoisir(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int, Agencevoyage> args)
	{
		try
		{
			var IDPrestataire = args.Value;

			StateHasChanged();
		}
		catch (Exception exception)
		{
			AfficherMessageErreur(exception);
		}
	}

	private void OuvrirPopupCreerRemboursement()
	{
		SiPopupSaisieVisible = true;
	}

	private async void VerifierRefTitre()
	{
		try
		{
			RoutingTitreRemEnCours = await saisieRembService.VerifierRefTitre(ModelRemb.RefTitre);
			StateHasChanged();
		}
		catch (Exception exception)
		{
			AfficherMessageErreur(exception);
		}
	}

	private async void RowOuvrirPopupModificationFacture(int IDRemb)
	{
		try
		{
			IDRembAModifier = IDRemb;
			notificationUIService.MontrerChargement();
			var Resultat = await saisieRembService.ObtenirDetailsRemb(IDRemb);

			ModelRemb.RefTitre = Resultat.RefTitre;
			ModelRemb.RoutingNonUtiliser = Resultat.RoutingNonUtiliser;
			ModelRemb.Observation = Resultat.Observation;
			RoutingTitreRemEnCours = Resultat.RoutingInitial;

			notificationUIService.CacherChargement();
			SiPopupModificationVisible = true;
			StateHasChanged();
		}
		catch (Exception exception)
		{
			AfficherMessageErreur(exception);
		}
	}

	private void RowOuvrirPopupSuppressionRemb(int IDRemb)
	{
		IDRembASupprimer = IDRemb;
		SiPopupSupprimerRembVisible = true;
	}

	private void OuvrirPopupEnvoyerFacture()
	{
		SiPopupEnvoyerRembVisible = true;
	}

	private void EffacerFormulaireCreation()
	{
		ModelRemb = new CreerRemboursementModel();
		RoutingTitreRemEnCours = null;
	}

	private void SoumettreFormulaireCreation()
	{
		if (ModelRemb.RoutingNonUtiliser.Length > 0 && ModelRemb.RefTitre.Length > 0 && RoutingTitreRemEnCours.Length > 0)
		{
			CreerRemboursement();
		}
		else
		{
			notificationUIService.AfficherMessage(new NotificationData
				{
					Message = "Vérifiez les détails saisis dans le formulaire.",
					TypeMessage = TypeDeNotification.Info
				});
		}
	}

	private void SoumettreFormulaireModification()
	{
		if (ModelRemb.RoutingNonUtiliser.Length > 0 && ModelRemb.RefTitre.Length > 0 && RoutingTitreRemEnCours.Length > 0)
		{
			ModifierRemb();
		}
		else
		{
			notificationUIService.AfficherMessage(new NotificationData
				{
					Message = "Vérifiez les détails saisis dans le formulaire.",
					TypeMessage = TypeDeNotification.Info
				});
		}
	}

	private async void EnvoyerRembEnEtapeSuperieure()
	{
		try
		{
			notificationUIService.MontrerChargement();
			notificationUIService.AfficherMessage(new NotificationData()
				{
					Message = "Remboursement(s) envoyé(s) à l'étape supérieure.",
					TypeMessage = TypeDeNotification.Succes
				});

			SiPopupEnvoyerRembVisible = false;
			await RafraichirListeRemb();
			StateHasChanged();
			notificationUIService.CacherChargement();
		}
		catch (Exception exception)
		{
			AfficherMessageErreur(exception);
		}
	}

	private void AnnulerEnvoyerRembEnEtapeSuperieure()
	{
		SiPopupEnvoyerRembVisible = false;
	}

	private async void SupprimerRemb()
	{
		try
		{
			notificationUIService.MontrerChargement();
			await saisieRembService.SupprimerRemboursement(IDRembASupprimer);
			notificationUIService.AfficherMessage(new NotificationData()
				{
					Message = "Remboursement supprimé avec Succès",
					TypeMessage = TypeDeNotification.Succes
				});
			SiPopupSupprimerRembVisible = false;
			IDRembASupprimer = 0;
			notificationUIService.CacherChargement();
			await RafraichirListeRemb();
			StateHasChanged();
		}
		catch (Exception exception)
		{
			notificationUIService.CacherChargement();
			AfficherMessageErreur(exception);
		}
	}

	private void AnnulerSupprimerRemb()
	{
		SiPopupSupprimerRembVisible = false;
	}

	private async void AfficherFichierSurNouvellePage(string CheminAbsoluFichier, string NomFichier)
	{
		FileStream StreamFichier = new FileStream(CheminAbsoluFichier, System.IO.FileMode.Open, System.IO.FileAccess.Read);
		MemoryStream stream = new MemoryStream();
		StreamFichier.CopyTo(stream);
		byte[] byteArray = stream.ToArray();
		await JS.InvokeAsync<object>("openStreamInNewWindow", Convert.ToBase64String(byteArray), NomFichier);
	}

	private async Task RafraichirInfoModification()
	{

	}

	private void RowSelectHandlerTitre(RowSelectEventArgs<AffichageTitreAvecPJ> args)
	{
		if (args.IsInteracted)
		{
		}
		if (args.IsHeaderCheckboxClicked)
		{

		}
	}

	private void RowDeselectHandlerTitre(RowDeselectEventArgs<AffichageTitreAvecPJ> args)
	{
		if (args.IsInteracted)
		{

		}
		if (args.IsHeaderCheckboxClicked)
		{

		}
	}

	private void RowSelectHandlerRemb(RowSelectEventArgs<AffichageRemboursement> args)
	{
		if (args.IsInteracted)
		{
			ListeIDRembSelectionnes.Add(args.Data.IDRemb);
		}
		if (args.IsHeaderCheckboxClicked)
		{
			ListeIDRembSelectionnes.Clear();
			ListeIDRembSelectionnes.AddRange(ListeDesRemboursements.Select(e => e.IDRemb));
		}
	}

	private void RowDeselectHandlerRemb(RowDeselectEventArgs<AffichageRemboursement> args)
	{
		if (args.IsInteracted)
		{
			ListeIDRembSelectionnes.Remove(args.Data.IDRemb);
		}
		if (args.IsHeaderCheckboxClicked)
		{
			ListeIDRembSelectionnes.Clear();
		}
	}

	private void AfficherMessageErreur(Exception exception)
	{
		notificationUIService.CacherChargement();
		notificationUIService.AfficherMessage(new NotificationData()
			{
				Message = exception.Message,
				TypeMessage = TypeDeNotification.Erreur
			});
	}
}