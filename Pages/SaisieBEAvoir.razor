@page "/saisie-beavoir"
@inject ICompagnieService compagnieService
@inject IAgenceDeVoyageService agenceDeVoyageService
@inject INotificationUIService notificationUIService

@inject IJSRuntime JS
@inject IWebHostEnvironment Environment


<SfDialog Height="1000px" Width="1200px" ShowCloseIcon IsModal @bind-Visible="SiPopupSaisieVisible">
	<DialogTemplates>
		<Header>
			<div class="PopupBEA__EnTete">
				<div class="GTT_Titre2">Créer un Bordereau d'envoi pour avoir</div>
				<div class="GTT_Body16">Remplissez le formulaire pour créer un bordereau d'avoir.</div>
			</div>
		</Header>
		<Content>
			<div class="PopupBEA__Contenu">
				<div class="PopupBEA__Contenu__Haut">
					<div class="PopupBEA__Formulaire">
						<EditForm @ref="CreationFormRef" EditContext="CreationContext" OnSubmit="@SoumettreFormulaireCreation" Model="ModelBEA">
							<DataAnnotationsValidator />
							<div class="PopupBEA__Formulaire__Item">
								<label class="PopupBEA__Formulaire__Item__Label">
									*Agence de voyage
								</label>
								<SfDropDownList TItem="Agencevoyage" TValue="int" Value="ModelBEA.IDAgenceVoyage" PopupHeight="230px" Placeholder="ASKY..." DataSource="@AgencesDeVoyages">
									<DropDownListFieldSettings Text="Libelleagencevoyage" Value="Idagencevoyage" />
									<DropDownListEvents TItem="Agencevoyage" TValue="int" ValueChange="RechercherFacturesAChoisir"></DropDownListEvents>
									<DropDownListTemplates TItem="Agencevoyage">
										<NoRecordsTemplate>
											<span> Aucune donnée disponible.</span>
										</NoRecordsTemplate>
									</DropDownListTemplates>
								</SfDropDownList>
								<ValidationMessage For="@(() => ModelBEA.IDAgenceVoyage)" />
							</div>
							<div class="PopupBEA__Formulaire__Item">
								<label class="PopupBEA__Formulaire__Item__Label">
									Observation
								</label>
								<SfTextBox Multiline=true Placeholder="Entrez une orservation ici..." @bind-Value="ModelBEA.Observation"></SfTextBox>
								<ValidationMessage For="@(() => ModelBEA.Observation)" />
							</div>
						</EditForm>
					</div>
				</div>
				<div class="PopupBEA__Contenu__Bas">
					<SfGrid Height="400" DataSource="@ListeDesAvoirsAChoisir" AllowTextWrap TValue="AffichageAvoirAvecPJ" RowHeight="60">
						<GridSelectionSettings CheckboxOnly></GridSelectionSettings>
						<GridTextWrapSettings WrapMode="WrapMode.Content"></GridTextWrapSettings>
						<GridEvents RowSelected="RowSelectHandlerAvoir" RowDeselected="@RowDeselectHandlerAvoir" TValue="AffichageAvoirAvecPJ"></GridEvents>
						<GridColumns>
							<GridColumn Type="ColumnType.CheckBox" Width="50"></GridColumn>
							<GridColumn Field=@nameof(AffichageAvoirAvecPJ.ListePiecesJointes) HeaderText="Pièce Jointes" TextAlign="TextAlign.Left" Width="160">
								<Template>
									@{
										var pieceJointe = context as AffichageAvoirAvecPJ;
										var indexFichier = 1;
										foreach (var fichier in pieceJointe.ListePiecesJointes)
										{
											var nomFichierAfficher = $"{fichier.Nom}";
											<span @onclick="() => AfficherFichierSurNouvellePage(fichier.CheminAbsolu, nomFichierAfficher)" class="GTT_Body12">@nomFichierAfficher</span>
											<br />
											indexFichier++;
										}
									}
								</Template>
							</GridColumn>
						</GridColumns>
						<GridTemplates>
							<EmptyRecordTemplate Context="contextNoRecord">
								<EspaceVide Titre="Aucun avoir trouvé." Contenu="Ajoutez un avoir pour voir apparaître des éléments dans la liste" />
							</EmptyRecordTemplate>
						</GridTemplates>
					</SfGrid>
				</div>
				<div class="PopupBEA__Contenu__Soumission">
					<button @onclick="SoumettreFormulaireCreation" type="submit" class="GTTbutton GTT_Button_Positive PopupBEA__Contenu__Soumission__Item">
						Enregistrer
					</button>
				</div>
			</div>
		</Content>
	</DialogTemplates>
	<DialogEvents OnClose="@EffacerFormulaireCreation" />
</SfDialog>
<SfDialog Height="1000px" Width="1200px" ShowCloseIcon IsModal @bind-Visible="SiPopupModificationVisible">
	<DialogTemplates>
		<Header>
			<div class="ModalHeader">
				<div class="ModalHeader__Title GTT_Titre2">Modifier un BEA</div>
				<div class="ModalHeader__Subtitle GTT_Body16">Remplissez le formulaire pour modifier le BEA.</div>
			</div>
		</Header>
		<Content>
			<div class="PopupBEA__Contenu">
				<div class="PopupBEA__Contenu__Haut">
					<div class="PopupBEA__Formulaire">
						@if (!SiModifierBEA)
						{
							<div class="PopupBEA__Formulaire__Item">
								<button @onclick="ActiverModificationBEA" type="submit" class="GTTbutton GTT_Button_Positive">
									Modifier
								</button>
							</div>
						}
						<EditForm @ref="ModificationFormRef" EditContext="ModificationContext" OnSubmit="@SoumettreFormulaireCreation" Model="ModelBEA">
							<DataAnnotationsValidator />
							<div class="PopupBEA__Formulaire__Item">
								<label class="PopupBEA__Formulaire__Item__Label">
									*Agence de Voyage
								</label>
								<SfDropDownList Enabled="SiModifierBEA" TItem="Agencevoyage" TValue="int" Value="ModelBEA.IDAgenceVoyage" PopupHeight="230px" Placeholder="ASKY..." DataSource="@AgencesDeVoyages">
									<DropDownListFieldSettings Text="Libelleagencevoyage" Value="Idagencevoyage" />
									<DropDownListEvents TItem="Agencevoyage" TValue="int" ValueChange="RechercherFacturesAChoisir"></DropDownListEvents>
									<DropDownListTemplates TItem="Agencevoyage">
										<NoRecordsTemplate>
											<span> Aucune donnée disponible.</span>
										</NoRecordsTemplate>
									</DropDownListTemplates>
								</SfDropDownList>
								<ValidationMessage For="@(() => ModelBEA.IDAgenceVoyage)" />
							</div>
							<div class="PopupBEA__Formulaire__Item">
								<label class="PopupBEA__Formulaire__Item__Label">
									Observation
								</label>
								<SfTextBox Enabled="SiModifierBEA" Multiline=true Placeholder="Entrez une orservation ici..." @bind-Value="ModelBEA.Observation"></SfTextBox>
								<ValidationMessage For="@(() => ModelBEA.Observation)" />
							</div>
						</EditForm>
					</div>
					<div class="PopupBEA__Contenu__Haut__Droite">
						@{
							if (SiRenvoiBEAEnCours)
							{
								<MessageRenvoi NomRenvoyeur="AQUEREBURU" DateDeRenvoi="DateTime.Now" MotifDeRenvoi="Pas de pièces jointes" />
							}
						}
					</div>
				</div>
				<div class="PopupBEA__Contenu__Bas">
					@{
						if (!SiModifierBEA)
						{
							<SfGrid Height="400" AllowTextWrap="true" DataSource="@ListeDesAvoirsDuBEEnCours" TValue="AffichageAvoirAvecPJ" RowHeight="60">
								<GridTextWrapSettings WrapMode="WrapMode.Content"></GridTextWrapSettings>
								<GridColumns>
									<GridColumn Field=@nameof(AffichageAvoirAvecPJ.ListePiecesJointes) HeaderText="Pièce Jointes" TextAlign="TextAlign.Left" Width="160">
										<Template>
											@{
												var pieceJointe = context as AffichageAvoirAvecPJ;
												var indexFichier = 1;
												foreach (var fichier in pieceJointe.ListePiecesJointes)
												{
													var nomFichierAfficher = $"{fichier.Nom}";
													<span @onclick="() => AfficherFichierSurNouvellePage(fichier.CheminAbsolu, nomFichierAfficher)" class="GTT_Body12">@nomFichierAfficher</span>
													<br />
													indexFichier++;
												}
											}
										</Template>
									</GridColumn>
								</GridColumns>
								<GridTemplates>
									<EmptyRecordTemplate Context="contextNoRecord">
										<EspaceVide />
									</EmptyRecordTemplate>
								</GridTemplates>
							</SfGrid>
						}
						else
						{
							<SfGrid Height="400" DataSource="@ListeDesAvoirsAChoisir" AllowTextWrap="true" TValue="AffichageAvoirAvecPJ" RowHeight="60">
								<GridSelectionSettings CheckboxOnly></GridSelectionSettings>
								<GridTextWrapSettings WrapMode="WrapMode.Content"></GridTextWrapSettings>
								<GridEvents RowSelected="RowSelectHandlerAvoir" RowDeselected="@RowDeselectHandlerAvoir" TValue="AffichageAvoirAvecPJ"></GridEvents>
								<GridColumns>
									<GridColumn Type="ColumnType.CheckBox" Width="40"></GridColumn>
									<GridColumn Field=@nameof(AffichageAvoirAvecPJ.ListePiecesJointes) HeaderText="Pièce Jointes" TextAlign="TextAlign.Left" Width="160">
										<Template>
											@{
												var pieceJointe = context as AffichageAvoirAvecPJ;
												var indexFichier = 1;
												foreach (var fichier in pieceJointe.ListePiecesJointes)
												{
													var nomFichierAfficher = $"{fichier.Nom}";
													<span @onclick="() => AfficherFichierSurNouvellePage(fichier.CheminAbsolu, nomFichierAfficher)" class="GTT_Body12">@nomFichierAfficher</span>
													<br />
													indexFichier++;
												}
											}
										</Template>
									</GridColumn>
								</GridColumns>
								<GridTemplates>
									<EmptyRecordTemplate Context="contextNoRecord">
										<EspaceVide Titre="Aucun avoir trouvé." Contenu="Ajoutez un avoir pour voir apparaître des éléments dans la liste" />
									</EmptyRecordTemplate>
								</GridTemplates>
							</SfGrid>
						}
					}
				</div>
				<div class="PopupBEA__Contenu__Soumission">
					@if (SiModifierBEA)
					{
						<button @onclick="SoumettreFormulaireModification" type="submit" class="GTTbutton GTT_Button_Positive PopupBEA__Contenu__Soumission__Item">
							Enregistrer
						</button>
					}
				</div>
			</div>
		</Content>
	</DialogTemplates>
	<DialogEvents OnClose="@EffacerFormulaireModification" />
</SfDialog>

<Modal Titre="Suppression"
	   Description="Souhaitez-vous supprimer la BEA ?"
	   SiModalVisible="SiPopupSupprimerBEAVisible"
	   OnPositiveClickCallback="@SupprimerBEAVisible"
	   OnNegativeClickCallback="@AnnulerSupprimerBEAVisible" />

<Modal Titre="Envoyer pour validation"
	   Description="Souhaitez-vous envoyer le(s) BEA(s) à l'étape supérieure ?"
	   SiModalVisible="SiPopupEnvoyerBEAVisible"
	   OnPositiveClickCallback="@EnvoyerBEAEnEtapeSuperieure"
	   OnNegativeClickCallback="@AnnulerEnvoyerBEAEnEtapeSuperieure" />


<div class="Page">
	<div class="Page__Header">
		<div class="Page__Header__Titre GTT_Titre3">Saisie des BE d'avoir</div>
		<div class="Page__Header__Body">
			<form class="Page__Header__Formulaire" @onsubmit="RafraichirListeBEA" method="POST">
				<div style="display: flex;
								flex-direction: row;
								align-items: center;
								column-gap: 20px;
								">
					<SfRadioButton @onchange="RafraichirListeBEA" Label="En traitement" Name="Status" Value="EnCours" @bind-Checked="Statut"></SfRadioButton>
					<SfRadioButton @onchange="RafraichirListeBEA" Label="Validés" Name="Status" Value="Valides" @bind-Checked="Statut"></SfRadioButton>
					<SfRadioButton @onchange="RafraichirListeBEA" Label="Rejetés" Name="Status" Value="Rejetes" @bind-Checked="Statut"></SfRadioButton>
				</div>
				<SfTextBox Width="200px" Placeholder="Rechercher" ID="TermeDeRecherche" @bind-Value="TermeDeRecherche"></SfTextBox>
				<div style="display: flex; align-items: center; column-gap: 20px;">
					<div>Du</div>
					<SfDatePicker Width="140px" TValue="DateTime?" @bind-Value="@DateDebut"></SfDatePicker>
					<div>Au</div>
					<SfDatePicker Width="140px" TValue="DateTime?" @bind-Value="@DateFin"></SfDatePicker>
				</div>
				<SfButton IsPrimary type="submit">Rafraichir</SfButton>
			</form>
			<div class="Page__Header__Body__Actions">
				<button @onclick="OuvrirPopupCreerBEA" disabled="@SiPopupSaisieVisible" class="GTTbutton GTT_Button_Positive">
					Nouveau
				</button>
				<button @onclick="OuvrirPopupEnvoyerBEA" disabled="@(ListeIDBEASelectionnes.Count == 0)" class="GTTbutton GTT_Button_Validation">
					Envoyer
				</button>
			</div>
		</div>
	</div>
	<div class="Page__Tableau">
		<SfGrid DataSource="@ListeDesBEAs" TValue="AffichageBEA" RowHeight="60">
			<GridSelectionSettings CheckboxOnly></GridSelectionSettings>
			<GridEvents RowSelected="RowSelectHandlerBEA" RowDeselected="@RowDeselectHandlerBEA" TValue="AffichageBEA"></GridEvents>
			<GridColumns>
				<GridColumn Type="ColumnType.CheckBox" Width="50"></GridColumn>
				<GridColumn Field=@nameof(AffichageBEA.IDBEAvoir) HeaderText="N° BEA" TextAlign="TextAlign.Left" Width="120"></GridColumn>
				<GridColumn Field="@nameof(AffichageBEA.DateSaisie)" HeaderText="Date & Heure de saisie" Width="200">
					<Template>
						@{
							var Details = context as AffichageBEA;
							if (Details.DateSaisie.HasValue)
							{
								<div>@(Details.DateSaisie.Value.ToString("dd MMMM yyyy HH:mm"))</div>
							}
						}
					</Template>
				</GridColumn>
				<GridColumn Field=@nameof(AffichageBEA.Observation) HeaderText="Observation" TextAlign="TextAlign.Left" Width="120"></GridColumn>
				<GridColumn HeaderText="Actions" TextAlign="TextAlign.Left">
					<Template>
						@{
							var Details = (context as AffichageBEA);
							<div style="display: flex; column-gap: 20px;">
								<button @onclick="@(()=> RowOuvrirPopupModificationBEA(Details.IDBEAvoir))" class="GTT_Icon_Button GTT_Icon_Button_Pencil">
									<img src="/images/pencil_icon_bouton.svg" width="24" height="24" />
								</button>
								<button @onclick="@(()=> RowOuvrirPopupSuppressionBEA(Details.IDBEAvoir))" class="GTT_Icon_Button GTT_Icon_Button_Trash">
									<img src="/images/trash_icon_bouton.svg" width="24" height="24" />
								</button>
							</div>
						}
					</Template>
				</GridColumn>
				<GridTemplates>
					<EmptyRecordTemplate Context="contextNoRecord">
						<EspaceVide Contenu="Ajoutez un BEA pour voir apparaître des éléments dans la liste." />
					</EmptyRecordTemplate>
				</GridTemplates>
			</GridColumns>
		</SfGrid>
	</div>
</div>

@code {
	private bool SiPopupSaisieVisible { get; set; } = false;
	private bool SiPopupEnvoyerBEAVisible { get; set; } = false;
	private bool SiPopupModificationVisible { get; set; } = false;
	private bool SiPopupSupprimerBEAVisible { get; set; } = false;

	private bool SiModifierBEA { get; set; } = false;

	private int IDBEAAModifier = 0;
	private int IDBEAASupprimer = 0;

	private EditContext CreationContext;
	private EditContext ModificationContext;

	private EditForm? CreationFormRef;
	private EditForm? ModificationFormRef;

	private List<Agencevoyage>? AgencesDeVoyages;
	private CreerBEAvoirModel ModelBEA = new CreerBEAvoirModel();

	private bool SiRenvoiBEAEnCours = true;

	private string Statut { get; set; } = "EnCours";
	private string TermeDeRecherche { get; set; } = String.Empty;
	private DateTime? DateFin { get; set; } = DateTime.Now.AddDays(20);
	private DateTime? DateDebut { get; set; } = DateTime.Now.AddDays(-20);


	private List<int> ListeIDBEASelectionnes = new List<int>();
	private List<AffichageBEA> ListeDesBEAs = new List<AffichageBEA>();

	private List<AffichageAvoirAvecPJ> ListeDesAvoirsAChoisir = new List<AffichageAvoirAvecPJ>();
	private List<AffichageAvoirAvecPJ> ListeDesAvoirsDuBEEnCours = new List<AffichageAvoirAvecPJ>();

	protected async override Task OnInitializedAsync()
	{
		AgencesDeVoyages = await agenceDeVoyageService.ObtenirAgencesDeVoyages();
		await RafraichirListeBEA();

	}

	private async Task RafraichirListeBEA()
	{
		ListeIDBEASelectionnes.Clear();

		ListeDesBEAs.Add(new AffichageBEA
			{
				DateSaisie = DateTime.Today,
				DateValidation = DateTime.Now,
				IDBEAvoir = 1,
				IDEtape = 1,
				IDRenvoi = 1,
				Observation = "boooo"
			});

		ListeDesBEAs.Add(new AffichageBEA
			{
				DateSaisie = DateTime.Today,
				DateValidation = DateTime.Now,
				IDBEAvoir = 2,
				IDEtape = 1,
				IDRenvoi = 1,
				Observation = "boooo"
			});

		ListeDesBEAs.Add(new AffichageBEA
			{
				DateSaisie = DateTime.Today,
				DateValidation = DateTime.Now,
				IDBEAvoir = 3,
				IDEtape = 1,
				IDRenvoi = 1,
				Observation = "boooo"
			});
	}

	private async void CreerBEA()
	{
		try
		{
			notificationUIService.MontrerChargement();


			notificationUIService.AfficherMessage(new NotificationData()
				{
					Message = "BEA Créée avec succès.",
					TypeMessage = TypeDeNotification.Succes
				});
			notificationUIService.CacherChargement();
			SiPopupSaisieVisible = false;
			await RafraichirListeBEA();
			StateHasChanged();
		}
		catch (Exception exception)
		{
			notificationUIService.CacherChargement();
			AfficherMessageErreur(exception);
		}
	}

	private async void ModifierBEA()
	{
		try
		{
			notificationUIService.MontrerChargement();


			notificationUIService.AfficherMessage(new NotificationData()
				{
					Message = "BEA mis à jour avec succès.",
					TypeMessage = TypeDeNotification.Succes
				});
			IDBEAAModifier = 0;

			SiPopupModificationVisible = false;
			notificationUIService.CacherChargement();
			await RafraichirListeBEA();
			StateHasChanged();
		}
		catch (Exception exception)
		{
			notificationUIService.CacherChargement();
			AfficherMessageErreur(exception);
		}
	}

	private void EffacerFormulaireModification()
	{
		SiModifierBEA = false;
		ModelBEA = new CreerBEAvoirModel();
		IDBEAAModifier = 0;
	}

	private void RechercherFacturesAChoisir(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int, Agencevoyage>
	args)
	{
		try
		{
			var IDAgenceDeVoyage = args.Value;

			StateHasChanged();
		}
		catch (Exception exception)
		{
			AfficherMessageErreur(exception);
		}
	}

	private void OuvrirPopupCreerBEA()
	{
		SiPopupSaisieVisible = true;
	}

	private async void RowOuvrirPopupModificationBEA(int IDBEA)
	{
		try
		{
			IDBEAAModifier = IDBEA;
			notificationUIService.MontrerChargement();



			notificationUIService.CacherChargement();
			SiPopupModificationVisible = true;
			StateHasChanged();
		}
		catch (Exception exception)
		{
			AfficherMessageErreur(exception);
		}
	}

	private void RowOuvrirPopupSuppressionBEA(int IDBonDePassage)
	{
		IDBEAASupprimer = IDBonDePassage;
		SiPopupSupprimerBEAVisible = true;
	}

	private void OuvrirPopupEnvoyerBEA()
	{
		SiPopupEnvoyerBEAVisible = true;
	}

	private void EffacerFormulaireCreation()
	{
		ModelBEA = new CreerBEAvoirModel();
	}

	private void ActiverModificationBEA()
	{
		SiModifierBEA = true;
	}

	private void SoumettreFormulaireCreation()
	{
		if (CreationFormRef.EditContext.Validate())
		{
			CreerBEA();
		}
	}

	private void SoumettreFormulaireModification()
	{
		if (ModificationFormRef.EditContext.Validate())
		{
			ModifierBEA();
		}
	}

	private async void EnvoyerBEAEnEtapeSuperieure()
	{
		try
		{
			notificationUIService.MontrerChargement();
			notificationUIService.AfficherMessage(new NotificationData()
				{
					Message = "BE d'avoir (s) envoyé(s) à l'étape supérieure.",
					TypeMessage = TypeDeNotification.Succes
				});

			SiPopupEnvoyerBEAVisible = false;
			await RafraichirListeBEA();
			StateHasChanged();
			notificationUIService.CacherChargement();
		}
		catch (Exception exception)
		{
			AfficherMessageErreur(exception);
		}
	}

	private void AnnulerEnvoyerBEAEnEtapeSuperieure()
	{
		SiPopupEnvoyerBEAVisible = false;
	}

	private async void SupprimerBEAVisible()
	{
		try
		{
			notificationUIService.MontrerChargement();
			notificationUIService.AfficherMessage(new NotificationData()
				{
					Message = "BE de Règlement supprimée avec Succès",
					TypeMessage = TypeDeNotification.Succes
				});
			SiPopupSupprimerBEAVisible = false;
			IDBEAASupprimer = 0;
			notificationUIService.CacherChargement();
			await RafraichirListeBEA();
			StateHasChanged();
		}
		catch (Exception exception)
		{
			notificationUIService.CacherChargement();
			AfficherMessageErreur(exception);
		}
	}

	private void AnnulerSupprimerBEAVisible()
	{
		SiPopupSupprimerBEAVisible = false;
	}

	private async void AfficherFichierSurNouvellePage(string CheminAbsoluFichier, string NomFichier)
	{
		FileStream StreamFichier = new FileStream(CheminAbsoluFichier, System.IO.FileMode.Open, System.IO.FileAccess.Read);
		MemoryStream stream = new MemoryStream();
		StreamFichier.CopyTo(stream);
		byte[] byteArray = stream.ToArray();
		await JS.InvokeAsync
		<object>
			("openStreamInNewWindow", Convert.ToBase64String(byteArray), NomFichier);
	}

	private void RowSelectHandlerAvoir(RowSelectEventArgs
	<AffichageAvoirAvecPJ>
		args)
	{
		if (args.IsInteracted)
		{
			ModelBEA.ListeDesIDAvoirsChoisis.Add(args.Data.IDAvoir);
		}
		if (args.IsHeaderCheckboxClicked)
		{
			ModelBEA.ListeDesIDAvoirsChoisis.Clear();
			ModelBEA.ListeDesIDAvoirsChoisis.AddRange(ListeDesAvoirsAChoisir.Select(e => e.IDAvoir));
		}
	}

	private void RowDeselectHandlerAvoir(RowDeselectEventArgs<AffichageAvoirAvecPJ>
		args)
	{
		if (args.IsInteracted)
		{
			ModelBEA.ListeDesIDAvoirsChoisis.Remove(args.Data.IDAvoir);
		}
		if (args.IsHeaderCheckboxClicked)
		{
			ModelBEA.ListeDesIDAvoirsChoisis.Clear();
		}
	}

	private void RowSelectHandlerBEA(RowSelectEventArgs<AffichageBEA>
		args)
	{
		if (args.IsInteracted)
		{
			ListeIDBEASelectionnes.Add(args.Data.IDBEAvoir);
		}
		if (args.IsHeaderCheckboxClicked)
		{
			ListeIDBEASelectionnes.Clear();
			ListeIDBEASelectionnes.AddRange(ListeDesBEAs.Select(e => e.IDBEAvoir));
		}
	}

	private void RowDeselectHandlerBEA(RowDeselectEventArgs<AffichageBEA>
		args)
	{
		if (args.IsInteracted)
		{
			ListeIDBEASelectionnes.Remove(args.Data.IDBEAvoir);
		}
		if (args.IsHeaderCheckboxClicked)
		{
			ListeIDBEASelectionnes.Clear();
		}
	}

	private void AfficherMessageErreur(Exception exception)
	{
		notificationUIService.CacherChargement();
		notificationUIService.AfficherMessage(new NotificationData()
			{
				Message = exception.Message,
				TypeMessage = TypeDeNotification.Erreur
			});
	}
}
