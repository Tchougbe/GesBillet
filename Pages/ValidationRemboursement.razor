@page "/validation-remboursement"
@inject IConfiguration _config
@inject ICompagnieService compagnieService
@inject IAgenceDeVoyageService agenceDeVoyageService
@inject INotificationUIService notificationUIService

@inject IJSRuntime JS
@inject IWebHostEnvironment Environment


<SfDialog Height="1000px" Width="1200px" ShowCloseIcon IsModal @bind-Visible="SiPopupConsultationVisible">
	<DialogTemplates>
		<Header>
			<div class="PopupRemb__EnTete">
				<div class="GTT_Titre2">Créer une Facture</div>
				<div class="GTT_Body16">Remplissez le formulaire pour créer une facture.</div>
			</div>
		</Header>
		<Content>
			<div class="PopupRemb__Contenu">
				<div class="PopupRemb__Contenu__Haut">
					<div class="PopupRemb__Formulaire">
							<div class="PopupRemb__Formulaire__Item">
								<label class="PopupRemb__Formulaire__Item__Label">
									Référence du Titre de Transport
								</label>
							<SfTextBox Readonly Placeholder="Entrez une orservation ici..." Value="@ModelRemb.RefTitre"></SfTextBox>
							</div>
							<div class="PopupRemb__Formulaire__Item">
								<label class="PopupRemb__Formulaire__Item__Label">
									Observation
								</label>
								<SfTextBox Readonly Multiline=true Placeholder="Entrez une orservation ici..." Value="@ModelRemb.Observation"></SfTextBox>
							</div>
					</div>
					<div class="PopupRemb__Contenu__Haut__Droite">
						
					</div>
				</div>
				<div class="PopupRemb__Contenu__Bas">
				@*	<SfGrid Height="400" DataSource="@ListeDesTitresFactureEnCours" AllowTextWrap TValue="AffichageTitreAvecPJ" RowHeight="60">
						<GridTextWrapSettings WrapMode="WrapMode.Content"></GridTextWrapSettings>
						<GridColumns>
							<GridColumn Type="ColumnType.CheckBox" Width="50"></GridColumn>
							<GridColumn Field=@nameof(AffichageTitreAvecPJ.RefFicheDeMission) HeaderText="Fiche De Mission" TextAlign="TextAlign.Left" Width="160"></GridColumn>
							<GridColumn Field=@nameof(AffichageTitreAvecPJ.LibelleClasse) HeaderText="Classe" TextAlign="TextAlign.Left" Width="120"></GridColumn>
							<GridColumn Field=@nameof(AffichageTitreAvecPJ.MontantTitreDeTransport) Format="N0" HeaderText="Montant" TextAlign="TextAlign.Left" Width="120"></GridColumn>
							<GridColumn Field=@nameof(AffichageTitreAvecPJ.ListePiecesJointes) HeaderText="Pièce Jointes" TextAlign="TextAlign.Left" Width="160">
								<Template>
									@{
										var pieceJointe = context as AffichageTitreAvecPJ;
										var indexFichier = 1;
										foreach (var fichier in pieceJointe.ListePiecesJointes)
										{
											var nomFichierAfficher = $"{fichier.Nom}";
											<span @onclick="() => AfficherFichierSurNouvellePage(fichier.CheminAbsolu, nomFichierAfficher)" class="GTT_Body12">@nomFichierAfficher</span>
											<br />
											indexFichier++;
										}
									}
								</Template>
							</GridColumn>
						</GridColumns>
						<GridTemplates>
							<EmptyRecordTemplate Context="contextNoRecord">
								<EspaceVide />
							</EmptyRecordTemplate>
						</GridTemplates>
					</SfGrid>*@
				</div>
				<div class="PopupRemb__Contenu__Soumission">
					<button @onclick="OuvrirPopupValiderFactureEnCours" type="submit" class="GTTbutton GTT_Button_Positive PopupRemb__Contenu__Soumission__Item">
						Valider
					</button>
					<button @onclick="OuvrirPopupRenvoiFactureEnCours" type="submit" class="GTTbutton GTT_Button_Danger PopupRemb__Contenu__Soumission__Item">
						Rejeter
					</button>
				</div>
			</div>
		</Content>
	</DialogTemplates>
	<DialogEvents OnClose="@EffacerConsulationDetails" />
</SfDialog>

<SfDialog Width="500" ShowCloseIcon IsModal @bind-Visible="SiPopupRenvoiRembVisible">
	<DialogTemplates>
		<Header>
			<div class="ModalHeader">
				<div class="ModalHeader__Title GTT_Titre2">Renvoi de la facture.</div>
			</div>
		</Header>
		<Content>
			<EditForm Model="ModelDeRenvoi" OnValidSubmit="RenvoyerFacture">
				<DataAnnotationsValidator />
				<div class="ModalRenvoi__Form">
					<div class="ModalRenvoi__Form__Item">
						<label class="ModalRenvoi__Form__Item__Label">
							Motif de renvoi
						</label>
						<SfTextBox Multiline=true Placeholder="Entrez le motif de renvoi ici..." @bind-Value="@ModelDeRenvoi.MotifDeRenvoi"></SfTextBox>
						<ValidationMessage For="@(() => ModelDeRenvoi.MotifDeRenvoi)" />
					</div>
					<button type="submit" class="GTTbutton GTT_Button_Danger">
						Renvoyer à l'étape précédente.
					</button>
				</div>
			</EditForm>
		</Content>
	</DialogTemplates>
	<DialogEvents OnClose="@EffacerFormulaireRenvoi" />
</SfDialog>

<Modal Titre="Envoyer à l'étape supérieure"
	   Description="Souhaitez-vous envoyer le(s) remboursement(s) à l'étape supérieure ?"
	   SiModalVisible="SiPopupEnvoyerRembVisible"
	   OnPositiveClickCallback="@EnvoyerRembEnEtapeSuperieure"
	   OnNegativeClickCallback="@AnnulerEnvoyerRembEnEtapeSuperieure" />

<Modal Titre="Envoyer à l'étape supérieure"
	   Description="Souhaitez-vous envoyer le(s) remboursement(s) à l'étape supérieure ?"
	   SiModalVisible="SiPopupEnvoyerRembMultipleVisible"
	   OnPositiveClickCallback="@EnvoyerRembEnEtapeSuperieure"
	   OnNegativeClickCallback="@AnnulerEnvoyerRembEnEtapeSuperieure" />

<Modal Titre="Valider"
	   Description="Souhaitez-vous valider la facture ?"
	   SiModalVisible="SiPopupValiderRembVisible"
	   OnPositiveClickCallback="@EnvoyerRembEnEtapeSuperieure"
	   OnNegativeClickCallback="@AnnulerEnvoyerRembEnEtapeSuperieure" />

<Modal Titre="Valider"
	   Description="Souhaitez-vous valider le(s) factures ?"
	   SiModalVisible="SiPopupValiderRembMultipleVisible"
	   OnPositiveClickCallback="@EnvoyerRembEnEtapeSuperieure"
	   OnNegativeClickCallback="@AnnulerEnvoyerRembEnEtapeSuperieure" />


<div class="Page">
	<div class="Page__Header">
		<div class="Page__Header__Titre GTT_Titre3">Validation des remboursements</div>
		<div class="Page__Header__Body">
			<form class="Page__Header__Formulaire" @onsubmit="RafraichirListeRemb" method="POST">
				<div style="display: flex;
								flex-direction: row;
								align-items: center;
								column-gap: 20px;
								">
					<SfRadioButton @onchange="RafraichirListeRemb" Label="En traitement" Name="Status" Value="EnCours" @bind-Checked="Statut"></SfRadioButton>
					<SfRadioButton @onchange="RafraichirListeRemb" Label="Validés" Name="Status" Value="Valides" @bind-Checked="Statut"></SfRadioButton>
					<SfRadioButton @onchange="RafraichirListeRemb" Label="Rejetés" Name="Status" Value="Rejetes" @bind-Checked="Statut"></SfRadioButton>
				</div>
				<SfTextBox Width="200px" Placeholder="Rechercher" ID="TermeDeRecherche" @bind-Value="TermeDeRecherche"></SfTextBox>
				<div style="display: flex; align-items: center; column-gap: 20px;">
					<div>Du</div>
					<SfDatePicker Width="140px" TValue="DateTime?" @bind-Value="@DateDebut"></SfDatePicker>
					<div>Au</div>
					<SfDatePicker Width="140px" TValue="DateTime?" @bind-Value="@DateFin"></SfDatePicker>
				</div>
				<SfButton IsPrimary type="submit">Rafraichir</SfButton>
			</form>
			<div class="Page__Header__Body__Actions">
				<button @onclick="OuvrirPopupValidationFactureMultiple" disabled="@(ListeIDRembSelectionnes.Count < 1)" class="GTTbutton GTT_Button_Positive">
					Valider
				</button>
				<button @onclick="OuvrirPopupEnvoiFactureMultiple" disabled="@(ListeIDRembSelectionnes.Count < 1)" class="GTTbutton GTT_Button_Validation">
					Envoyer
				</button>
			</div>
		</div>
	</div>
	<div class="Page__Tableau">
		<SfGrid DataSource="@ListeDesRemboursements" TValue="AffichageRemboursement" RowHeight="60">
			<GridSelectionSettings CheckboxOnly></GridSelectionSettings>
			<GridEvents RowSelected="RowSelectHandlerRemb" RowDeselected="@RowDeselectHandlerRemb" TValue="AffichageRemboursement"></GridEvents>
			<GridColumns>
				<GridColumn Type="ColumnType.CheckBox" Width="50"></GridColumn>
				<GridColumn Field=@nameof(AffichageRemboursement.IDRemb) HeaderText="N° Facture" TextAlign="TextAlign.Left" Width="120"></GridColumn>
				<GridColumn Field="@nameof(AffichageRemboursement.DateSaisie)" HeaderText="Date & Heure de saisie" Width="200">
					<Template>
						@{
							var Details = context as AffichageRemboursement;
							if (Details.DateSaisie.HasValue)
							{
								<div>@(Details.DateSaisie.Value.ToString("dd MMMM yyyy HH:mm"))</div>
							}
						}
					</Template>
				</GridColumn>
				<GridColumn Field=@nameof(AffichageRemboursement.Observation) HeaderText="Observation" TextAlign="TextAlign.Left" Width="120"></GridColumn>
				<GridColumn HeaderText="ACTIONS" TextAlign="TextAlign.Left">
					<Template>
						@{
							var Details = (context as AffichageRemboursement);
							<div style="display: flex; column-gap: 20px;">
								<button @onclick="@(()=> RowAfficherPopupConsultation(Details.IDRemb))" class="GTT_Icon_Button GTT_Icon_Button_Eye">
									<img src="/images/pencil_icon_bouton.svg" width="24" height="24" />
								</button>
							</div>
						}
					</Template>
				</GridColumn>
				<GridTemplates>
					<EmptyRecordTemplate Context="contextNoRecord">
						<EspaceVide Contenu="Ajoutez un Facture pour voir apparaître des éléments dans la liste." />
					</EmptyRecordTemplate>
				</GridTemplates>
			</GridColumns>
		</SfGrid>
	</div>
</div>

@code {
	private bool SiPopupConsultationVisible { get; set; } = false;
	private bool SiPopupRenvoiRembVisible { get; set; } = false;
	private bool SiPopupEnvoyerRembVisible { get; set; } = false;
	private bool SiPopupEnvoyerRembMultipleVisible { get; set; } = false;
	private bool SiPopupValiderRembVisible { get; set; } = false;
	private bool SiPopupValiderRembMultipleVisible { get; set; } = false;

	private int IDRembEnCours = 0;

	private CreerRemboursementModel ModelRemb = new CreerRemboursementModel();

	private string Statut { get; set; } = "EnCours";
	private string TermeDeRecherche { get; set; } = String.Empty;
	private DateTime? DateFin { get; set; } = DateTime.Now.AddDays(20);
	private DateTime? DateDebut { get; set; } = DateTime.Now.AddDays(-20);

	private List<int> ListeIDRembSelectionnes = new List<int>();
	private List<AffichageRemboursement> ListeDesRemboursements = new List<AffichageRemboursement>();

	private RenvoiModel ModelDeRenvoi = new RenvoiModel();

	protected async override Task OnInitializedAsync()
	{
		await RafraichirListeRemb();
	}

	private async Task RafraichirListeRemb()
	{
		ListeIDRembSelectionnes.Clear();
	}

	private void RechercherTitresAchoisir(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int, Agencevoyage> args)
	{
		try
		{
			var IDPrestataire = args.Value;


			StateHasChanged();
		}
		catch (Exception exception)
		{
			AfficherMessageErreur(exception);
		}
	}

	private void OuvrirPopupEnvoyerFacture()
	{
		SiPopupEnvoyerRembVisible = true;
	}

	private void OuvrirPopupValidationFactureMultiple()
	{
		SiPopupValiderRembMultipleVisible = true;
	}

	private void OuvrirPopupEnvoiFactureMultiple()
	{
		SiPopupEnvoyerRembMultipleVisible = true;
	}

	private void OuvrirPopupValiderFactureEnCours()
	{

		SiPopupValiderRembVisible = true;
	}

	private void OuvrirPopupRenvoiFactureEnCours()
	{
		SiPopupRenvoiRembVisible = true;
	}

	private async void EnvoyerRembEnEtapeSuperieure()
	{
		try
		{
			notificationUIService.MontrerChargement();
			notificationUIService.AfficherMessage(new NotificationData()
				{
					Message = "Remboursement(s) envoyé(s) à l'étape supérieure.",
					TypeMessage = TypeDeNotification.Succes
				});

			SiPopupEnvoyerRembVisible = false;
			await RafraichirListeRemb();
			StateHasChanged();
			notificationUIService.CacherChargement();
		}
		catch (Exception exception)
		{
			AfficherMessageErreur(exception);
		}
	}

	private void AnnulerEnvoyerRembEnEtapeSuperieure()
	{
		SiPopupEnvoyerRembVisible = false;
	}

	private void RenvoyerFacture()
	{

	}

	private void EffacerConsulationDetails()
	{
		ModelRemb = new CreerRemboursementModel();
	}

	private void EffacerFormulaireRenvoi()
	{
		IDRembEnCours = 0;
		ModelDeRenvoi = new RenvoiModel();
	}

	private async void AfficherFichierSurNouvellePage(string CheminAbsoluFichier, string NomFichier)
	{
		FileStream StreamFichier = new FileStream(CheminAbsoluFichier, System.IO.FileMode.Open, System.IO.FileAccess.Read);
		MemoryStream stream = new MemoryStream();
		StreamFichier.CopyTo(stream);
		byte[] byteArray = stream.ToArray();
		await JS.InvokeAsync<object>("openStreamInNewWindow", Convert.ToBase64String(byteArray), NomFichier);
	}

	private async void RowAfficherPopupConsultation(int IDFacture)
	{
		try
		{
			IDRembEnCours = IDFacture;
			notificationUIService.MontrerChargement();




			SiPopupConsultationVisible = true;
			notificationUIService.CacherChargement();
			StateHasChanged();
		}
		catch (Exception exception)
		{
			AfficherMessageErreur(exception);
		}
	}


	private void RowSelectHandlerRemb(RowSelectEventArgs<AffichageRemboursement> args)
	{
		if (args.IsInteracted)
		{
			ListeIDRembSelectionnes.Add(args.Data.IDRemb);
		}
		if (args.IsHeaderCheckboxClicked)
		{
			ListeIDRembSelectionnes.Clear();
			ListeIDRembSelectionnes.AddRange(ListeDesRemboursements.Select(e => e.IDRemb));
		}
	}

	private void RowDeselectHandlerRemb(RowDeselectEventArgs<AffichageRemboursement> args)
	{
		if (args.IsInteracted)
		{
			ListeIDRembSelectionnes.Remove(args.Data.IDRemb);
		}
		if (args.IsHeaderCheckboxClicked)
		{
			ListeIDRembSelectionnes.Clear();
		}
	}

	private void AfficherMessageErreur(Exception exception)
	{
		notificationUIService.CacherChargement();
		notificationUIService.AfficherMessage(new NotificationData()
			{
				Message = exception.Message,
				TypeMessage = TypeDeNotification.Erreur
			});
	}
}