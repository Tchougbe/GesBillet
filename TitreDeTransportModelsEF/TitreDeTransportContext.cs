// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace Gestions_des_Titres_de_Transport.TitreDeTransportModelsEF;

public partial class TitreDeTransportContext : DbContext
{
    public TitreDeTransportContext(DbContextOptions<TitreDeTransportContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Agencevoyage> Agencevoyage { get; set; }

    public virtual DbSet<Autorisationetape> Autorisationetape { get; set; }

    public virtual DbSet<Autorisationrole> Autorisationrole { get; set; }

    public virtual DbSet<Avoir> Avoir { get; set; }

    public virtual DbSet<Beavoir> Beavoir { get; set; }

    public virtual DbSet<Bereglement> Bereglement { get; set; }

    public virtual DbSet<Bondepassage> Bondepassage { get; set; }

    public virtual DbSet<Classevoyage> Classevoyage { get; set; }

    public virtual DbSet<Compagnie> Compagnie { get; set; }

    public virtual DbSet<Etape> Etape { get; set; }

    public virtual DbSet<Facture> Facture { get; set; }

    public virtual DbSet<Piecejointe> Piecejointe { get; set; }

    public virtual DbSet<Remboursement> Remboursement { get; set; }

    public virtual DbSet<Renvoi> Renvoi { get; set; }

    public virtual DbSet<Roleutilisateur> Roleutilisateur { get; set; }

    public virtual DbSet<Titredetransport> Titredetransport { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Agencevoyage>(entity =>
        {
            entity.HasKey(e => e.Idagencevoyage);

            entity.ToTable("AGENCEVOYAGE");

            entity.Property(e => e.Idagencevoyage).HasColumnName("IDAGENCEVOYAGE");
            entity.Property(e => e.Dateagentenragencevoyage)
                .HasColumnType("datetime")
                .HasColumnName("DATEAGENTENRAGENCEVOYAGE");
            entity.Property(e => e.Libelleagencevoyage)
                .IsRequired()
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("LIBELLEAGENCEVOYAGE");
            entity.Property(e => e.Matagentenragencevoyage).HasColumnName("MATAGENTENRAGENCEVOYAGE");
        });

        modelBuilder.Entity<Autorisationetape>(entity =>
        {
            entity.HasKey(e => e.Idautoetape);

            entity.ToTable("AUTORISATIONETAPE");

            entity.HasIndex(e => e.Idetape, "ASSOCIATION_22_FK");

            entity.Property(e => e.Idautoetape).HasColumnName("IDAUTOETAPE");
            entity.Property(e => e.Dateattributionautoetape)
                .HasColumnType("datetime")
                .HasColumnName("DATEATTRIBUTIONAUTOETAPE");
            entity.Property(e => e.Dateexpirationautoetape)
                .HasColumnType("datetime")
                .HasColumnName("DATEEXPIRATIONAUTOETAPE");
            entity.Property(e => e.Idetape).HasColumnName("IDETAPE");
            entity.Property(e => e.Matagentautoetape).HasColumnName("MATAGENTAUTOETAPE");
            entity.Property(e => e.Siconsul).HasColumnName("SICONSUL");
            entity.Property(e => e.Simodification).HasColumnName("SIMODIFICATION");
            entity.Property(e => e.Sisuppression).HasColumnName("SISUPPRESSION");

            entity.HasOne(d => d.IdetapeNavigation).WithMany(p => p.Autorisationetape)
                .HasForeignKey(d => d.Idetape)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AUTORISA_ASSOCIATI_ETAPE");
        });

        modelBuilder.Entity<Autorisationrole>(entity =>
        {
            entity.HasKey(e => e.Idroleauto);

            entity.ToTable("AUTORISATIONROLE");

            entity.HasIndex(e => e.Idroleutilisateur, "LIERAUTOROLEROLEUTI_FK");

            entity.Property(e => e.Idroleauto).HasColumnName("IDROLEAUTO");
            entity.Property(e => e.Dateattributionroleauto)
                .HasColumnType("datetime")
                .HasColumnName("DATEATTRIBUTIONROLEAUTO");
            entity.Property(e => e.Dateexpirationroleauto)
                .HasColumnType("datetime")
                .HasColumnName("DATEEXPIRATIONROLEAUTO");
            entity.Property(e => e.Idroleutilisateur).HasColumnName("IDROLEUTILISATEUR");
            entity.Property(e => e.Matagentroleauto).HasColumnName("MATAGENTROLEAUTO");

            entity.HasOne(d => d.IdroleutilisateurNavigation).WithMany(p => p.Autorisationrole)
                .HasForeignKey(d => d.Idroleutilisateur)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AUTORISA_LIERAUTOR_ROLEUTIL");
        });

        modelBuilder.Entity<Avoir>(entity =>
        {
            entity.HasKey(e => e.Idavoir);

            entity.ToTable("AVOIR");

            entity.HasIndex(e => e.Idbeavoir, "LIERAVBEA_FK");

            entity.Property(e => e.Idavoir).HasColumnName("IDAVOIR");
            entity.Property(e => e.Dateagenceemissionavoir)
                .HasColumnType("datetime")
                .HasColumnName("DATEAGENCEEMISSIONAVOIR");
            entity.Property(e => e.Daterecavoir)
                .HasColumnType("datetime")
                .HasColumnName("DATERECAVOIR");
            entity.Property(e => e.Datesaisiavoir)
                .HasColumnType("datetime")
                .HasColumnName("DATESAISIAVOIR");
            entity.Property(e => e.Datevalavoir)
                .HasColumnType("datetime")
                .HasColumnName("DATEVALAVOIR");
            entity.Property(e => e.Idagencedevoyageavoir).HasColumnName("IDAGENCEDEVOYAGEAVOIR");
            entity.Property(e => e.Idbeavoir).HasColumnName("IDBEAVOIR");
            entity.Property(e => e.Idetapeavoir).HasColumnName("IDETAPEAVOIR");
            entity.Property(e => e.Idrenvoiavoir).HasColumnName("IDRENVOIAVOIR");
            entity.Property(e => e.Matagentsaiavoir).HasColumnName("MATAGENTSAIAVOIR");
            entity.Property(e => e.Matagentvalavoir).HasColumnName("MATAGENTVALAVOIR");
            entity.Property(e => e.Montanttotalsuravoir)
                .HasColumnType("money")
                .HasColumnName("MONTANTTOTALSURAVOIR");
            entity.Property(e => e.Numeroagenceavoir)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("NUMEROAGENCEAVOIR");
            entity.Property(e => e.Obseravoir)
                .HasMaxLength(160)
                .IsUnicode(false)
                .HasColumnName("OBSERAVOIR");

            entity.HasOne(d => d.IdbeavoirNavigation).WithMany(p => p.Avoir)
                .HasForeignKey(d => d.Idbeavoir)
                .HasConstraintName("FK_AVOIR_LIERAVBEA_BEAVOIR");
        });

        modelBuilder.Entity<Beavoir>(entity =>
        {
            entity.HasKey(e => e.Idbeavoir);

            entity.ToTable("BEAVOIR");

            entity.Property(e => e.Idbeavoir).HasColumnName("IDBEAVOIR");
            entity.Property(e => e.Datesaisibeavoir)
                .HasColumnType("datetime")
                .HasColumnName("DATESAISIBEAVOIR");
            entity.Property(e => e.Datevalbeavoir)
                .HasColumnType("datetime")
                .HasColumnName("DATEVALBEAVOIR");
            entity.Property(e => e.Idetapebeavoir).HasColumnName("IDETAPEBEAVOIR");
            entity.Property(e => e.Idrenvoibeavoir).HasColumnName("IDRENVOIBEAVOIR");
            entity.Property(e => e.Matagentsaibeavoir).HasColumnName("MATAGENTSAIBEAVOIR");
            entity.Property(e => e.Matagentvalbeavoir).HasColumnName("MATAGENTVALBEAVOIR");
            entity.Property(e => e.Obserbeavoir)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("OBSERBEAVOIR");
        });

        modelBuilder.Entity<Bereglement>(entity =>
        {
            entity.HasKey(e => e.Idbereglem);

            entity.ToTable("BEREGLEMENT");

            entity.Property(e => e.Idbereglem).HasColumnName("IDBEREGLEM");
            entity.Property(e => e.Datesaiber)
                .HasColumnType("datetime")
                .HasColumnName("DATESAIBER");
            entity.Property(e => e.Datevalber)
                .HasColumnType("datetime")
                .HasColumnName("DATEVALBER");
            entity.Property(e => e.Idagencevoyageber).HasColumnName("IDAGENCEVOYAGEBER");
            entity.Property(e => e.Idetapeber).HasColumnName("IDETAPEBER");
            entity.Property(e => e.Idrenvoiber).HasColumnName("IDRENVOIBER");
            entity.Property(e => e.Matagentsaiber).HasColumnName("MATAGENTSAIBER");
            entity.Property(e => e.Matagentvalber).HasColumnName("MATAGENTVALBER");
            entity.Property(e => e.Obserber)
                .HasMaxLength(160)
                .IsUnicode(false)
                .HasColumnName("OBSERBER");
        });

        modelBuilder.Entity<Bondepassage>(entity =>
        {
            entity.HasKey(e => e.Idbonp);

            entity.ToTable("BONDEPASSAGE");

            entity.Property(e => e.Idbonp).HasColumnName("IDBONP");
            entity.Property(e => e.Datesaibonp)
                .HasColumnType("datetime")
                .HasColumnName("DATESAIBONP");
            entity.Property(e => e.Datevalbonp)
                .HasColumnType("datetime")
                .HasColumnName("DATEVALBONP");
            entity.Property(e => e.Idagencevoyagebonp).HasColumnName("IDAGENCEVOYAGEBONP");
            entity.Property(e => e.Idetapebonp).HasColumnName("IDETAPEBONP");
            entity.Property(e => e.Idrenvoibonp).HasColumnName("IDRENVOIBONP");
            entity.Property(e => e.Matagentsaibonp).HasColumnName("MATAGENTSAIBONP");
            entity.Property(e => e.Matagentvalbonp).HasColumnName("MATAGENTVALBONP");
            entity.Property(e => e.Obserbonp)
                .HasMaxLength(160)
                .IsUnicode(false)
                .HasColumnName("OBSERBONP");
        });

        modelBuilder.Entity<Classevoyage>(entity =>
        {
            entity.HasKey(e => e.Idclasse);

            entity.ToTable("CLASSEVOYAGE");

            entity.Property(e => e.Idclasse).HasColumnName("IDCLASSE");
            entity.Property(e => e.Dateagentenrclasse)
                .HasColumnType("datetime")
                .HasColumnName("DATEAGENTENRCLASSE");
            entity.Property(e => e.Libelleclasse)
                .IsRequired()
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("LIBELLECLASSE");
            entity.Property(e => e.Matagentenrclasse).HasColumnName("MATAGENTENRCLASSE");
        });

        modelBuilder.Entity<Compagnie>(entity =>
        {
            entity.HasKey(e => e.Idcompagnie);

            entity.ToTable("COMPAGNIE");

            entity.Property(e => e.Idcompagnie).HasColumnName("IDCOMPAGNIE");
            entity.Property(e => e.Dateagentenrcompagnie)
                .HasColumnType("datetime")
                .HasColumnName("DATEAGENTENRCOMPAGNIE");
            entity.Property(e => e.Libellecompagnie)
                .IsRequired()
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("LIBELLECOMPAGNIE");
            entity.Property(e => e.Matagentenrcomapgnie).HasColumnName("MATAGENTENRCOMAPGNIE");
        });

        modelBuilder.Entity<Etape>(entity =>
        {
            entity.HasKey(e => e.Idetape);

            entity.ToTable("ETAPE");

            entity.Property(e => e.Idetape).HasColumnName("IDETAPE");
            entity.Property(e => e.Libelleetape)
                .IsRequired()
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("LIBELLEETAPE");
            entity.Property(e => e.Numeroetape).HasColumnName("NUMEROETAPE");
            entity.Property(e => e.Sietapeactive).HasColumnName("SIETAPEACTIVE");
        });

        modelBuilder.Entity<Facture>(entity =>
        {
            entity.HasKey(e => e.Idfacture);

            entity.ToTable("FACTURE");

            entity.HasIndex(e => e.Idbereglem, "LIERBERFAC_FK");

            entity.Property(e => e.Idfacture).HasColumnName("IDFACTURE");
            entity.Property(e => e.Dateagenceemissionfacture)
                .HasColumnType("datetime")
                .HasColumnName("DATEAGENCEEMISSIONFACTURE");
            entity.Property(e => e.Datesaisifacture)
                .HasColumnType("datetime")
                .HasColumnName("DATESAISIFACTURE");
            entity.Property(e => e.Datevalfacture)
                .HasColumnType("datetime")
                .HasColumnName("DATEVALFACTURE");
            entity.Property(e => e.Idagencevoyagefacture).HasColumnName("IDAGENCEVOYAGEFACTURE");
            entity.Property(e => e.Idbereglem).HasColumnName("IDBEREGLEM");
            entity.Property(e => e.Idetapefacture).HasColumnName("IDETAPEFACTURE");
            entity.Property(e => e.Idrenvoifacture).HasColumnName("IDRENVOIFACTURE");
            entity.Property(e => e.Matagentsaifacture).HasColumnName("MATAGENTSAIFACTURE");
            entity.Property(e => e.Matagentvalfacture).HasColumnName("MATAGENTVALFACTURE");
            entity.Property(e => e.Montanttotalsurfacture)
                .HasColumnType("money")
                .HasColumnName("MONTANTTOTALSURFACTURE");
            entity.Property(e => e.Numerofactureagence)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("NUMEROFACTUREAGENCE");
            entity.Property(e => e.Obserfacture)
                .HasMaxLength(160)
                .IsUnicode(false)
                .HasColumnName("OBSERFACTURE");

            entity.HasOne(d => d.IdbereglemNavigation).WithMany(p => p.Facture)
                .HasForeignKey(d => d.Idbereglem)
                .HasConstraintName("FK_FACTURE_LIERBERFA_BEREGLEM");
        });

        modelBuilder.Entity<Piecejointe>(entity =>
        {
            entity.HasKey(e => e.Idpiecej);

            entity.ToTable("PIECEJOINTE");

            entity.Property(e => e.Idpiecej).HasColumnName("IDPIECEJ");
            entity.Property(e => e.Dateenrpiecej)
                .HasColumnType("datetime")
                .HasColumnName("DATEENRPIECEJ");
            entity.Property(e => e.Idavoirpiecej).HasColumnName("IDAVOIRPIECEJ");
            entity.Property(e => e.Idetapepiecej).HasColumnName("IDETAPEPIECEJ");
            entity.Property(e => e.Idfacturepiecej).HasColumnName("IDFACTUREPIECEJ");
            entity.Property(e => e.Idtitrepiecej).HasColumnName("IDTITREPIECEJ");
            entity.Property(e => e.Matagentenrpiecej).HasColumnName("MATAGENTENRPIECEJ");
            entity.Property(e => e.Nompiecej)
                .IsRequired()
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("NOMPIECEJ");
        });

        modelBuilder.Entity<Remboursement>(entity =>
        {
            entity.HasKey(e => e.Idremb);

            entity.ToTable("REMBOURSEMENT");

            entity.HasIndex(e => e.Idavoir, "LIERAVOIRREMB_FK");

            entity.Property(e => e.Idremb).HasColumnName("IDREMB");
            entity.Property(e => e.Datesairemb)
                .HasColumnType("datetime")
                .HasColumnName("DATESAIREMB");
            entity.Property(e => e.Datevalremb)
                .HasColumnType("datetime")
                .HasColumnName("DATEVALREMB");
            entity.Property(e => e.Idavoir).HasColumnName("IDAVOIR");
            entity.Property(e => e.Idetaperemb).HasColumnName("IDETAPEREMB");
            entity.Property(e => e.Idrenvoiremb).HasColumnName("IDRENVOIREMB");
            entity.Property(e => e.Matagentsairemb).HasColumnName("MATAGENTSAIREMB");
            entity.Property(e => e.Matagentvalremb).HasColumnName("MATAGENTVALREMB");
            entity.Property(e => e.Montantgapremb)
                .HasColumnType("money")
                .HasColumnName("MONTANTGAPREMB");
            entity.Property(e => e.Montantremb)
                .HasColumnType("money")
                .HasColumnName("MONTANTREMB");
            entity.Property(e => e.Motifsinonremb)
                .HasMaxLength(160)
                .IsUnicode(false)
                .HasColumnName("MOTIFSINONREMB");
            entity.Property(e => e.Observationremb)
                .HasMaxLength(160)
                .IsUnicode(false)
                .HasColumnName("OBSERVATIONREMB");
            entity.Property(e => e.Routingnonutiliser)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("ROUTINGNONUTILISER");
            entity.Property(e => e.Siremboursable).HasColumnName("SIREMBOURSABLE");
            entity.Property(e => e.Sirembourse).HasColumnName("SIREMBOURSE");

            entity.HasOne(d => d.IdavoirNavigation).WithMany(p => p.Remboursement)
                .HasForeignKey(d => d.Idavoir)
                .HasConstraintName("FK_REMBOURS_LIERAVOIR_AVOIR");
        });

        modelBuilder.Entity<Renvoi>(entity =>
        {
            entity.HasKey(e => e.Idrenvoi);

            entity.ToTable("RENVOI");

            entity.Property(e => e.Idrenvoi).HasColumnName("IDRENVOI");
            entity.Property(e => e.Daterenvoi)
                .HasColumnType("datetime")
                .HasColumnName("DATERENVOI");
            entity.Property(e => e.Iddocument).HasColumnName("IDDOCUMENT");
            entity.Property(e => e.Matagentrenvoi).HasColumnName("MATAGENTRENVOI");
            entity.Property(e => e.Motifrenvoi)
                .IsRequired()
                .HasMaxLength(160)
                .IsUnicode(false)
                .HasColumnName("MOTIFRENVOI");
            entity.Property(e => e.Typedocument)
                .IsRequired()
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("TYPEDOCUMENT");
        });

        modelBuilder.Entity<Roleutilisateur>(entity =>
        {
            entity.HasKey(e => e.Idroleutilisateur);

            entity.ToTable("ROLEUTILISATEUR");

            entity.Property(e => e.Idroleutilisateur).HasColumnName("IDROLEUTILISATEUR");
            entity.Property(e => e.Libelleroleutilisateur)
                .IsRequired()
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("LIBELLEROLEUTILISATEUR");
            entity.Property(e => e.Slugroleutilisateur)
                .IsRequired()
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("SLUGROLEUTILISATEUR");
        });

        modelBuilder.Entity<Titredetransport>(entity =>
        {
            entity.HasKey(e => e.Idtitre);

            entity.ToTable("TITREDETRANSPORT", tb => tb.HasComment("Table des titres de transports"));

            entity.HasIndex(e => e.Idfacture, "ASSOCIATION_23_FK");

            entity.HasIndex(e => e.Idetape, "LIERETAPETT_FK");

            entity.HasIndex(e => e.Idremb, "LIERREMBTT3_FK");

            entity.HasIndex(e => e.Idbonp, "LIERTITRETBONP_FK");

            entity.HasIndex(e => e.Idclasse, "LIERTTCLASSEVOYAGE_FK");

            entity.HasIndex(e => e.Idcompagnie, "LIERTTCOMP_FK");

            entity.HasIndex(e => e.Idagencevoyage, "LIERTTPRES_FK");

            entity.Property(e => e.Idtitre).HasColumnName("IDTITRE");
            entity.Property(e => e.Datedepart)
                .HasColumnType("datetime")
                .HasColumnName("DATEDEPART");
            entity.Property(e => e.Dateretour)
                .HasColumnType("datetime")
                .HasColumnName("DATERETOUR");
            entity.Property(e => e.Datesaititret)
                .HasColumnType("datetime")
                .HasColumnName("DATESAITITRET");
            entity.Property(e => e.Datevaltitret)
                .HasColumnType("datetime")
                .HasColumnName("DATEVALTITRET");
            entity.Property(e => e.Idagencevoyage).HasColumnName("IDAGENCEVOYAGE");
            entity.Property(e => e.Idbonp).HasColumnName("IDBONP");
            entity.Property(e => e.Idclasse).HasColumnName("IDCLASSE");
            entity.Property(e => e.Idcompagnie).HasColumnName("IDCOMPAGNIE");
            entity.Property(e => e.Idetape).HasColumnName("IDETAPE");
            entity.Property(e => e.Idfacture).HasColumnName("IDFACTURE");
            entity.Property(e => e.Idremb).HasColumnName("IDREMB");
            entity.Property(e => e.Idrenvoititret).HasColumnName("IDRENVOITITRET");
            entity.Property(e => e.Matagentbeneficiaire).HasColumnName("MATAGENTBENEFICIAIRE");
            entity.Property(e => e.Matagentsaititret).HasColumnName("MATAGENTSAITITRET");
            entity.Property(e => e.Matagentvaltitret).HasColumnName("MATAGENTVALTITRET");
            entity.Property(e => e.Montanttitret)
                .HasColumnType("money")
                .HasColumnName("MONTANTTITRET");
            entity.Property(e => e.Obstitret)
                .HasMaxLength(160)
                .IsUnicode(false)
                .HasColumnName("OBSTITRET");
            entity.Property(e => e.Reffichemission)
                .IsRequired()
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("REFFICHEMISSION");
            entity.Property(e => e.Reftitret)
                .IsRequired()
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("REFTITRET");
            entity.Property(e => e.Routing)
                .IsRequired()
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("ROUTING");

            entity.HasOne(d => d.IdagencevoyageNavigation).WithMany(p => p.Titredetransport)
                .HasForeignKey(d => d.Idagencevoyage)
                .HasConstraintName("FK_TITREDET_LIERTTPRE_AGENCEVO");

            entity.HasOne(d => d.IdbonpNavigation).WithMany(p => p.Titredetransport)
                .HasForeignKey(d => d.Idbonp)
                .HasConstraintName("FK_TITREDET_LIERTITRE_BONDEPAS");

            entity.HasOne(d => d.IdclasseNavigation).WithMany(p => p.Titredetransport)
                .HasForeignKey(d => d.Idclasse)
                .HasConstraintName("FK_TITREDET_LIERTTCLA_CLASSEVO");

            entity.HasOne(d => d.IdcompagnieNavigation).WithMany(p => p.Titredetransport)
                .HasForeignKey(d => d.Idcompagnie)
                .HasConstraintName("FK_TITREDET_LIERTTCOM_COMPAGNI");

            entity.HasOne(d => d.IdetapeNavigation).WithMany(p => p.Titredetransport)
                .HasForeignKey(d => d.Idetape)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TITREDET_LIERETAPE_ETAPE");

            entity.HasOne(d => d.IdfactureNavigation).WithMany(p => p.Titredetransport)
                .HasForeignKey(d => d.Idfacture)
                .HasConstraintName("FK_TITREDET_ASSOCIATI_FACTURE");

            entity.HasOne(d => d.IdrembNavigation).WithMany(p => p.Titredetransport)
                .HasForeignKey(d => d.Idremb)
                .HasConstraintName("FK_TITREDET_LIERREMBT_REMBOURS");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}